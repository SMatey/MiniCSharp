//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Lizsa/OneDrive/Documents/GitHub/MiniCSharp/MiniCSharp/Grammar/MiniCSharpParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace parser.generated {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IMiniCSharpParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class MiniCSharpParserBaseListener : IMiniCSharpParserListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>Prog</c>
	/// labeled alternative in <see cref="MiniCSharpParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProg([NotNull] MiniCSharpParser.ProgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Prog</c>
	/// labeled alternative in <see cref="MiniCSharpParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProg([NotNull] MiniCSharpParser.ProgContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>UsingStat</c>
	/// labeled alternative in <see cref="MiniCSharpParser.usingDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUsingStat([NotNull] MiniCSharpParser.UsingStatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>UsingStat</c>
	/// labeled alternative in <see cref="MiniCSharpParser.usingDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUsingStat([NotNull] MiniCSharpParser.UsingStatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>QualifiedIdent</c>
	/// labeled alternative in <see cref="MiniCSharpParser.qualifiedIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQualifiedIdent([NotNull] MiniCSharpParser.QualifiedIdentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>QualifiedIdent</c>
	/// labeled alternative in <see cref="MiniCSharpParser.qualifiedIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQualifiedIdent([NotNull] MiniCSharpParser.QualifiedIdentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>VarDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.varDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVarDeclaration([NotNull] MiniCSharpParser.VarDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>VarDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.varDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVarDeclaration([NotNull] MiniCSharpParser.VarDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ClassDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.classDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassDeclaration([NotNull] MiniCSharpParser.ClassDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ClassDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.classDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassDeclaration([NotNull] MiniCSharpParser.ClassDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.methodDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethodDeclaration([NotNull] MiniCSharpParser.MethodDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.methodDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethodDeclaration([NotNull] MiniCSharpParser.MethodDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FormalParams</c>
	/// labeled alternative in <see cref="MiniCSharpParser.formPars"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFormalParams([NotNull] MiniCSharpParser.FormalParamsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FormalParams</c>
	/// labeled alternative in <see cref="MiniCSharpParser.formPars"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFormalParams([NotNull] MiniCSharpParser.FormalParamsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeIdent</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeIdent([NotNull] MiniCSharpParser.TypeIdentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeIdent</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeIdent([NotNull] MiniCSharpParser.TypeIdentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DesignatorStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDesignatorStatement([NotNull] MiniCSharpParser.DesignatorStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DesignatorStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDesignatorStatement([NotNull] MiniCSharpParser.DesignatorStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] MiniCSharpParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] MiniCSharpParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForStatement([NotNull] MiniCSharpParser.ForStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForStatement([NotNull] MiniCSharpParser.ForStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStatement([NotNull] MiniCSharpParser.WhileStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStatement([NotNull] MiniCSharpParser.WhileStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BreakStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBreakStatement([NotNull] MiniCSharpParser.BreakStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BreakStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBreakStatement([NotNull] MiniCSharpParser.BreakStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnStatement([NotNull] MiniCSharpParser.ReturnStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnStatement([NotNull] MiniCSharpParser.ReturnStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ReadStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReadStatement([NotNull] MiniCSharpParser.ReadStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ReadStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReadStatement([NotNull] MiniCSharpParser.ReadStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>WriteStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWriteStatement([NotNull] MiniCSharpParser.WriteStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>WriteStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWriteStatement([NotNull] MiniCSharpParser.WriteStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BlockStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlockStatement([NotNull] MiniCSharpParser.BlockStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BlockStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlockStatement([NotNull] MiniCSharpParser.BlockStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchDispatchStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSwitchDispatchStatement([NotNull] MiniCSharpParser.SwitchDispatchStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchDispatchStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSwitchDispatchStatement([NotNull] MiniCSharpParser.SwitchDispatchStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>EmptyStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEmptyStatement([NotNull] MiniCSharpParser.EmptyStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>EmptyStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEmptyStatement([NotNull] MiniCSharpParser.EmptyStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.forVarDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForVarDecl([NotNull] MiniCSharpParser.ForVarDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.forVarDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForVarDecl([NotNull] MiniCSharpParser.ForVarDeclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.forInit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForInit([NotNull] MiniCSharpParser.ForInitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.forInit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForInit([NotNull] MiniCSharpParser.ForInitContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.forDeclaredVarPart"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForDeclaredVarPart([NotNull] MiniCSharpParser.ForDeclaredVarPartContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.forDeclaredVarPart"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForDeclaredVarPart([NotNull] MiniCSharpParser.ForDeclaredVarPartContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.forTypeAndMultipleVars"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForTypeAndMultipleVars([NotNull] MiniCSharpParser.ForTypeAndMultipleVarsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.forTypeAndMultipleVars"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForTypeAndMultipleVars([NotNull] MiniCSharpParser.ForTypeAndMultipleVarsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniCSharpParser.forUpdate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForUpdate([NotNull] MiniCSharpParser.ForUpdateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniCSharpParser.forUpdate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForUpdate([NotNull] MiniCSharpParser.ForUpdateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchStat</c>
	/// labeled alternative in <see cref="MiniCSharpParser.switchStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSwitchStat([NotNull] MiniCSharpParser.SwitchStatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchStat</c>
	/// labeled alternative in <see cref="MiniCSharpParser.switchStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSwitchStat([NotNull] MiniCSharpParser.SwitchStatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchBlockContent</c>
	/// labeled alternative in <see cref="MiniCSharpParser.switchBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSwitchBlockContent([NotNull] MiniCSharpParser.SwitchBlockContentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchBlockContent</c>
	/// labeled alternative in <see cref="MiniCSharpParser.switchBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSwitchBlockContent([NotNull] MiniCSharpParser.SwitchBlockContentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchCaseSection</c>
	/// labeled alternative in <see cref="MiniCSharpParser.switchSection"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSwitchCaseSection([NotNull] MiniCSharpParser.SwitchCaseSectionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchCaseSection</c>
	/// labeled alternative in <see cref="MiniCSharpParser.switchSection"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSwitchCaseSection([NotNull] MiniCSharpParser.SwitchCaseSectionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>CaseLabel</c>
	/// labeled alternative in <see cref="MiniCSharpParser.switchLabel"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCaseLabel([NotNull] MiniCSharpParser.CaseLabelContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>CaseLabel</c>
	/// labeled alternative in <see cref="MiniCSharpParser.switchLabel"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCaseLabel([NotNull] MiniCSharpParser.CaseLabelContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DefaultLabel</c>
	/// labeled alternative in <see cref="MiniCSharpParser.switchLabel"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDefaultLabel([NotNull] MiniCSharpParser.DefaultLabelContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DefaultLabel</c>
	/// labeled alternative in <see cref="MiniCSharpParser.switchLabel"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDefaultLabel([NotNull] MiniCSharpParser.DefaultLabelContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BlockNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlockNode([NotNull] MiniCSharpParser.BlockNodeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BlockNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlockNode([NotNull] MiniCSharpParser.BlockNodeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ActualParams</c>
	/// labeled alternative in <see cref="MiniCSharpParser.actPars"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterActualParams([NotNull] MiniCSharpParser.ActualParamsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ActualParams</c>
	/// labeled alternative in <see cref="MiniCSharpParser.actPars"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitActualParams([NotNull] MiniCSharpParser.ActualParamsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConditionNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConditionNode([NotNull] MiniCSharpParser.ConditionNodeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConditionNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConditionNode([NotNull] MiniCSharpParser.ConditionNodeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConditionTermNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.condTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConditionTermNode([NotNull] MiniCSharpParser.ConditionTermNodeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConditionTermNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.condTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConditionTermNode([NotNull] MiniCSharpParser.ConditionTermNodeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConditionFactNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.condFact"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConditionFactNode([NotNull] MiniCSharpParser.ConditionFactNodeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConditionFactNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.condFact"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConditionFactNode([NotNull] MiniCSharpParser.ConditionFactNodeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Expression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] MiniCSharpParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Expression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] MiniCSharpParser.ExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeCast</c>
	/// labeled alternative in <see cref="MiniCSharpParser.cast"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeCast([NotNull] MiniCSharpParser.TypeCastContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeCast</c>
	/// labeled alternative in <see cref="MiniCSharpParser.cast"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeCast([NotNull] MiniCSharpParser.TypeCastContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TermNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTermNode([NotNull] MiniCSharpParser.TermNodeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TermNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTermNode([NotNull] MiniCSharpParser.TermNodeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DesignatorFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDesignatorFactor([NotNull] MiniCSharpParser.DesignatorFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DesignatorFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDesignatorFactor([NotNull] MiniCSharpParser.DesignatorFactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IntLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntLitFactor([NotNull] MiniCSharpParser.IntLitFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IntLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntLitFactor([NotNull] MiniCSharpParser.IntLitFactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DoubleLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDoubleLitFactor([NotNull] MiniCSharpParser.DoubleLitFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DoubleLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDoubleLitFactor([NotNull] MiniCSharpParser.DoubleLitFactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>CharLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCharLitFactor([NotNull] MiniCSharpParser.CharLitFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>CharLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCharLitFactor([NotNull] MiniCSharpParser.CharLitFactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>StringLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringLitFactor([NotNull] MiniCSharpParser.StringLitFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>StringLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringLitFactor([NotNull] MiniCSharpParser.StringLitFactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TrueLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTrueLitFactor([NotNull] MiniCSharpParser.TrueLitFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TrueLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTrueLitFactor([NotNull] MiniCSharpParser.TrueLitFactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FalseLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFalseLitFactor([NotNull] MiniCSharpParser.FalseLitFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FalseLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFalseLitFactor([NotNull] MiniCSharpParser.FalseLitFactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NullLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNullLitFactor([NotNull] MiniCSharpParser.NullLitFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NullLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNullLitFactor([NotNull] MiniCSharpParser.NullLitFactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NewObjectFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNewObjectFactor([NotNull] MiniCSharpParser.NewObjectFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NewObjectFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNewObjectFactor([NotNull] MiniCSharpParser.NewObjectFactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenExpressionFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenExpressionFactor([NotNull] MiniCSharpParser.ParenExpressionFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenExpressionFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenExpressionFactor([NotNull] MiniCSharpParser.ParenExpressionFactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DesignatorNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.designator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDesignatorNode([NotNull] MiniCSharpParser.DesignatorNodeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DesignatorNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.designator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDesignatorNode([NotNull] MiniCSharpParser.DesignatorNodeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>RelationalOp</c>
	/// labeled alternative in <see cref="MiniCSharpParser.relop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelationalOp([NotNull] MiniCSharpParser.RelationalOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>RelationalOp</c>
	/// labeled alternative in <see cref="MiniCSharpParser.relop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelationalOp([NotNull] MiniCSharpParser.RelationalOpContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace parser.generated
