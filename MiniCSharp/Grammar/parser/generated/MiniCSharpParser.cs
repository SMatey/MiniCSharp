//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/casam/OneDrive/Documentos/Anio 2025/semestre 1/QA/MiniCSharp/MiniCSharp/Grammar/MiniCSharpParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace parser.generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MiniCSharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CLASS=1, VOID=2, IF=3, ELSE=4, FOR=5, WHILE=6, BREAK=7, RETURN=8, READ=9, 
		WRITE=10, NEW=11, TRUE=12, FALSE=13, NULL=14, USING=15, SWITCH=16, CASE=17, 
		DEFAULT=18, ASSIGN=19, ADDOP=20, MULOP=21, RELOP=22, AND=23, OR=24, INCREMENT=25, 
		DECREMENT=26, LPAREN=27, RPAREN=28, LBRACE=29, RBRACE=30, LBRACK=31, RBRACK=32, 
		SEMICOLON=33, COMMA=34, DOT=35, COLON=36, INTLIT=37, DOUBLELIT=38, CHARLIT=39, 
		STRINGLIT=40, ID=41, COMMENT=42, LINECOMMENT=43, WS=44;
	public const int
		RULE_program = 0, RULE_usingDirective = 1, RULE_qualifiedIdentifier = 2, 
		RULE_varDecl = 3, RULE_classDecl = 4, RULE_methodDecl = 5, RULE_formPars = 6, 
		RULE_type = 7, RULE_statement = 8, RULE_switchStatement = 9, RULE_switchBlock = 10, 
		RULE_switchSection = 11, RULE_switchLabel = 12, RULE_block = 13, RULE_actPars = 14, 
		RULE_condition = 15, RULE_condTerm = 16, RULE_condFact = 17, RULE_expr = 18, 
		RULE_cast = 19, RULE_term = 20, RULE_factor = 21, RULE_designator = 22, 
		RULE_relop = 23;
	public static readonly string[] ruleNames = {
		"program", "usingDirective", "qualifiedIdentifier", "varDecl", "classDecl", 
		"methodDecl", "formPars", "type", "statement", "switchStatement", "switchBlock", 
		"switchSection", "switchLabel", "block", "actPars", "condition", "condTerm", 
		"condFact", "expr", "cast", "term", "factor", "designator", "relop"
	};

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'void'", "'if'", "'else'", "'for'", "'while'", "'break'", 
		"'return'", "'read'", "'write'", "'new'", "'true'", "'false'", "'null'", 
		"'using'", "'switch'", "'case'", "'default'", "'='", null, null, null, 
		"'&&'", "'||'", "'++'", "'--'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"';'", "','", "'.'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "VOID", "IF", "ELSE", "FOR", "WHILE", "BREAK", "RETURN", 
		"READ", "WRITE", "NEW", "TRUE", "FALSE", "NULL", "USING", "SWITCH", "CASE", 
		"DEFAULT", "ASSIGN", "ADDOP", "MULOP", "RELOP", "AND", "OR", "INCREMENT", 
		"DECREMENT", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
		"SEMICOLON", "COMMA", "DOT", "COLON", "INTLIT", "DOUBLELIT", "CHARLIT", 
		"STRINGLIT", "ID", "COMMENT", "LINECOMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSharpParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniCSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniCSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MiniCSharpParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 48;
				usingDirective();
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 54;
			Match(CLASS);
			State = 55;
			Match(ID);
			State = 56;
			Match(LBRACE);
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2199023255558L) != 0)) {
				{
				State = 60;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 57;
					varDecl();
					}
					break;
				case 2:
					{
					State = 58;
					classDecl();
					}
					break;
				case 3:
					{
					State = 59;
					methodDecl();
					}
					break;
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 65;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MiniCSharpParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterUsingDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitUsingDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(USING);
			State = 68;
			qualifiedIdentifier();
			State = 69;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MiniCSharpParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MiniCSharpParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MiniCSharpParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MiniCSharpParser.DOT, i);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterQualifiedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitQualifiedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierContext qualifiedIdentifier() {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_qualifiedIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(ID);
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 72;
				Match(DOT);
				State = 73;
				Match(ID);
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MiniCSharpParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MiniCSharpParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			type();
			State = 80;
			Match(ID);
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 81;
				Match(COMMA);
				State = 82;
				Match(ID);
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 88;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MiniCSharpParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(CLASS);
			State = 91;
			Match(ID);
			State = 92;
			Match(LBRACE);
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 93;
				varDecl();
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 99;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(MiniCSharpParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_methodDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 101;
				type();
				}
				break;
			case VOID:
				{
				State = 102;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 105;
			Match(ID);
			State = 106;
			Match(LPAREN);
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 107;
				formPars();
				}
			}

			State = 110;
			Match(RPAREN);
			State = 111;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MiniCSharpParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MiniCSharpParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterFormPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitFormPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(Context, State);
		EnterRule(_localctx, 12, RULE_formPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			type();
			State = 114;
			Match(ID);
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 115;
				Match(COMMA);
				State = 116;
				type();
				State = 117;
				Match(ID);
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MiniCSharpParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MiniCSharpParser.RBRACK, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(ID);
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 125;
				Match(LBRACK);
				State = 126;
				Match(RBRACK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(MiniCSharpParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(MiniCSharpParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniCSharpParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(MiniCSharpParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(MiniCSharpParser.DECREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MiniCSharpParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MiniCSharpParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MiniCSharpParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MiniCSharpParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(MiniCSharpParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MiniCSharpParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MiniCSharpParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MiniCSharpParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MiniCSharpParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLIT() { return GetToken(MiniCSharpParser.INTLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		int _la;
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129;
				designator();
				State = 139;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASSIGN:
					{
					State = 130;
					Match(ASSIGN);
					State = 131;
					expr();
					}
					break;
				case LPAREN:
					{
					State = 132;
					Match(LPAREN);
					State = 134;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4260742854656L) != 0)) {
						{
						State = 133;
						actPars();
						}
					}

					State = 136;
					Match(RPAREN);
					}
					break;
				case INCREMENT:
					{
					State = 137;
					Match(INCREMENT);
					}
					break;
				case DECREMENT:
					{
					State = 138;
					Match(DECREMENT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 141;
				Match(SEMICOLON);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 143;
				Match(IF);
				State = 144;
				Match(LPAREN);
				State = 145;
				condition();
				State = 146;
				Match(RPAREN);
				State = 147;
				statement();
				State = 150;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 148;
					Match(ELSE);
					State = 149;
					statement();
					}
					break;
				}
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 152;
				Match(FOR);
				State = 153;
				Match(LPAREN);
				State = 154;
				expr();
				State = 155;
				Match(SEMICOLON);
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4260742854656L) != 0)) {
					{
					State = 156;
					condition();
					}
				}

				State = 159;
				Match(SEMICOLON);
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2208150128616L) != 0)) {
					{
					State = 160;
					statement();
					}
				}

				State = 163;
				Match(RPAREN);
				State = 164;
				statement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 166;
				Match(WHILE);
				State = 167;
				Match(LPAREN);
				State = 168;
				condition();
				State = 169;
				Match(RPAREN);
				State = 170;
				statement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 172;
				Match(BREAK);
				State = 173;
				Match(SEMICOLON);
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 174;
				Match(RETURN);
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4260742854656L) != 0)) {
					{
					State = 175;
					expr();
					}
				}

				State = 178;
				Match(SEMICOLON);
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 7);
				{
				State = 179;
				Match(READ);
				State = 180;
				Match(LPAREN);
				State = 181;
				designator();
				State = 182;
				Match(RPAREN);
				State = 183;
				Match(SEMICOLON);
				}
				break;
			case WRITE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 185;
				Match(WRITE);
				State = 186;
				Match(LPAREN);
				State = 187;
				expr();
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 188;
					Match(COMMA);
					State = 189;
					Match(INTLIT);
					}
				}

				State = 192;
				Match(RPAREN);
				State = 193;
				Match(SEMICOLON);
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 195;
				block();
				}
				break;
			case SWITCH:
				EnterOuterAlt(_localctx, 10);
				{
				State = 196;
				switchStatement();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 11);
				{
				State = 197;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(MiniCSharpParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			Match(SWITCH);
			State = 201;
			Match(LPAREN);
			State = 202;
			expr();
			State = 203;
			Match(RPAREN);
			State = 204;
			Match(LBRACE);
			State = 205;
			switchBlock();
			State = 206;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchSectionContext[] switchSection() {
			return GetRuleContexts<SwitchSectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchSectionContext switchSection(int i) {
			return GetRuleContext<SwitchSectionContext>(i);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_switchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 208;
				switchSection();
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SwitchSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitchSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitchSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchSectionContext switchSection() {
		SwitchSectionContext _localctx = new SwitchSectionContext(Context, State);
		EnterRule(_localctx, 22, RULE_switchSection);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 214;
					switchLabel();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 217;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2208150128616L) != 0)) {
				{
				{
				State = 219;
				statement();
				}
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(MiniCSharpParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MiniCSharpParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MiniCSharpParser.DEFAULT, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 24, RULE_switchLabel);
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225;
				Match(CASE);
				State = 226;
				expr();
				State = 227;
				Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 229;
				Match(DEFAULT);
				State = 230;
				Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(LBRACE);
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2208150128616L) != 0)) {
				{
				State = 236;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 234;
					varDecl();
					}
					break;
				case 2:
					{
					State = 235;
					statement();
					}
					break;
				}
				}
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 241;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterActPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitActPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(Context, State);
		EnterRule(_localctx, 28, RULE_actPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			expr();
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 244;
				Match(COMMA);
				State = 245;
				expr();
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext[] condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(MiniCSharpParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(MiniCSharpParser.OR, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 30, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			condTerm();
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 252;
				Match(OR);
				State = 253;
				condTerm();
				}
				}
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MiniCSharpParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MiniCSharpParser.AND, i);
		}
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterCondTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitCondTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(Context, State);
		EnterRule(_localctx, 32, RULE_condTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			condFact();
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 260;
				Match(AND);
				State = 261;
				condFact();
				}
				}
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterCondFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitCondFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondFact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(Context, State);
		EnterRule(_localctx, 34, RULE_condFact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			expr();
			State = 268;
			relop();
			State = 269;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADDOP() { return GetTokens(MiniCSharpParser.ADDOP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDOP(int i) {
			return GetToken(MiniCSharpParser.ADDOP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 36, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADDOP) {
				{
				State = 271;
				Match(ADDOP);
				}
			}

			State = 275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 274;
				cast();
				}
				break;
			}
			State = 277;
			term();
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ADDOP) {
				{
				{
				State = 278;
				Match(ADDOP);
				State = 279;
				term();
				}
				}
				State = 284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 38, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(LPAREN);
			State = 286;
			type();
			State = 287;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULOP() { return GetTokens(MiniCSharpParser.MULOP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULOP(int i) {
			return GetToken(MiniCSharpParser.MULOP, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 40, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			factor();
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULOP) {
				{
				{
				State = 290;
				Match(MULOP);
				State = 291;
				factor();
				}
				}
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLIT() { return GetToken(MiniCSharpParser.INTLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLELIT() { return GetToken(MiniCSharpParser.DOUBLELIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARLIT() { return GetToken(MiniCSharpParser.CHARLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLIT() { return GetToken(MiniCSharpParser.STRINGLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(MiniCSharpParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(MiniCSharpParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(MiniCSharpParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(MiniCSharpParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MiniCSharpParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MiniCSharpParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 42, RULE_factor);
		int _la;
		try {
			State = 326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 297;
				designator();
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 298;
					Match(LPAREN);
					State = 300;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4260742854656L) != 0)) {
						{
						State = 299;
						actPars();
						}
					}

					State = 302;
					Match(RPAREN);
					}
				}

				}
				break;
			case INTLIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 305;
				Match(INTLIT);
				}
				break;
			case DOUBLELIT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 306;
				Match(DOUBLELIT);
				}
				break;
			case CHARLIT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 307;
				Match(CHARLIT);
				}
				break;
			case STRINGLIT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 308;
				Match(STRINGLIT);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 309;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 310;
				Match(FALSE);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 311;
				Match(NULL);
				}
				break;
			case NEW:
				EnterOuterAlt(_localctx, 9);
				{
				State = 312;
				Match(NEW);
				State = 313;
				Match(ID);
				State = 320;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					{
					State = 314;
					Match(LBRACK);
					State = 315;
					Match(RBRACK);
					}
					}
					break;
				case 2:
					{
					{
					State = 316;
					Match(LBRACK);
					State = 317;
					expr();
					State = 318;
					Match(RBRACK);
					}
					}
					break;
				}
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 10);
				{
				State = 322;
				Match(LPAREN);
				State = 323;
				expr();
				State = 324;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MiniCSharpParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MiniCSharpParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MiniCSharpParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MiniCSharpParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(MiniCSharpParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(MiniCSharpParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(MiniCSharpParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(MiniCSharpParser.RBRACK, i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 44, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(ID);
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK || _la==DOT) {
				{
				State = 335;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 329;
					Match(DOT);
					State = 330;
					Match(ID);
					}
					break;
				case LBRACK:
					{
					State = 331;
					Match(LBRACK);
					State = 332;
					expr();
					State = 333;
					Match(RBRACK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOP() { return GetToken(MiniCSharpParser.RELOP, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 46, RULE_relop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			Match(RELOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,44,343,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,1,0,5,0,50,8,0,10,0,12,0,53,9,0,1,0,1,0,1,0,1,0,1,
		0,1,0,5,0,61,8,0,10,0,12,0,64,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
		5,2,75,8,2,10,2,12,2,78,9,2,1,3,1,3,1,3,1,3,5,3,84,8,3,10,3,12,3,87,9,
		3,1,3,1,3,1,4,1,4,1,4,1,4,5,4,95,8,4,10,4,12,4,98,9,4,1,4,1,4,1,5,1,5,
		3,5,104,8,5,1,5,1,5,1,5,3,5,109,8,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
		6,5,6,120,8,6,10,6,12,6,123,9,6,1,7,1,7,1,7,3,7,128,8,7,1,8,1,8,1,8,1,
		8,1,8,3,8,135,8,8,1,8,1,8,1,8,3,8,140,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,3,8,151,8,8,1,8,1,8,1,8,1,8,1,8,3,8,158,8,8,1,8,1,8,3,8,162,8,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,177,8,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,191,8,8,1,8,1,8,1,8,1,
		8,1,8,1,8,3,8,199,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,5,10,210,8,
		10,10,10,12,10,213,9,10,1,11,4,11,216,8,11,11,11,12,11,217,1,11,5,11,221,
		8,11,10,11,12,11,224,9,11,1,12,1,12,1,12,1,12,1,12,1,12,3,12,232,8,12,
		1,13,1,13,1,13,5,13,237,8,13,10,13,12,13,240,9,13,1,13,1,13,1,14,1,14,
		1,14,5,14,247,8,14,10,14,12,14,250,9,14,1,15,1,15,1,15,5,15,255,8,15,10,
		15,12,15,258,9,15,1,16,1,16,1,16,5,16,263,8,16,10,16,12,16,266,9,16,1,
		17,1,17,1,17,1,17,1,18,3,18,273,8,18,1,18,3,18,276,8,18,1,18,1,18,1,18,
		5,18,281,8,18,10,18,12,18,284,9,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,
		5,20,293,8,20,10,20,12,20,296,9,20,1,21,1,21,1,21,3,21,301,8,21,1,21,3,
		21,304,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,3,21,321,8,21,1,21,1,21,1,21,1,21,3,21,327,8,21,1,22,1,
		22,1,22,1,22,1,22,1,22,1,22,5,22,336,8,22,10,22,12,22,339,9,22,1,23,1,
		23,1,23,0,0,24,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,0,0,376,0,51,1,0,0,0,2,67,1,0,0,0,4,71,1,0,0,0,6,79,1,0,0,
		0,8,90,1,0,0,0,10,103,1,0,0,0,12,113,1,0,0,0,14,124,1,0,0,0,16,198,1,0,
		0,0,18,200,1,0,0,0,20,211,1,0,0,0,22,215,1,0,0,0,24,231,1,0,0,0,26,233,
		1,0,0,0,28,243,1,0,0,0,30,251,1,0,0,0,32,259,1,0,0,0,34,267,1,0,0,0,36,
		272,1,0,0,0,38,285,1,0,0,0,40,289,1,0,0,0,42,326,1,0,0,0,44,328,1,0,0,
		0,46,340,1,0,0,0,48,50,3,2,1,0,49,48,1,0,0,0,50,53,1,0,0,0,51,49,1,0,0,
		0,51,52,1,0,0,0,52,54,1,0,0,0,53,51,1,0,0,0,54,55,5,1,0,0,55,56,5,41,0,
		0,56,62,5,29,0,0,57,61,3,6,3,0,58,61,3,8,4,0,59,61,3,10,5,0,60,57,1,0,
		0,0,60,58,1,0,0,0,60,59,1,0,0,0,61,64,1,0,0,0,62,60,1,0,0,0,62,63,1,0,
		0,0,63,65,1,0,0,0,64,62,1,0,0,0,65,66,5,30,0,0,66,1,1,0,0,0,67,68,5,15,
		0,0,68,69,3,4,2,0,69,70,5,33,0,0,70,3,1,0,0,0,71,76,5,41,0,0,72,73,5,35,
		0,0,73,75,5,41,0,0,74,72,1,0,0,0,75,78,1,0,0,0,76,74,1,0,0,0,76,77,1,0,
		0,0,77,5,1,0,0,0,78,76,1,0,0,0,79,80,3,14,7,0,80,85,5,41,0,0,81,82,5,34,
		0,0,82,84,5,41,0,0,83,81,1,0,0,0,84,87,1,0,0,0,85,83,1,0,0,0,85,86,1,0,
		0,0,86,88,1,0,0,0,87,85,1,0,0,0,88,89,5,33,0,0,89,7,1,0,0,0,90,91,5,1,
		0,0,91,92,5,41,0,0,92,96,5,29,0,0,93,95,3,6,3,0,94,93,1,0,0,0,95,98,1,
		0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,99,1,0,0,0,98,96,1,0,0,0,99,100,5,
		30,0,0,100,9,1,0,0,0,101,104,3,14,7,0,102,104,5,2,0,0,103,101,1,0,0,0,
		103,102,1,0,0,0,104,105,1,0,0,0,105,106,5,41,0,0,106,108,5,27,0,0,107,
		109,3,12,6,0,108,107,1,0,0,0,108,109,1,0,0,0,109,110,1,0,0,0,110,111,5,
		28,0,0,111,112,3,26,13,0,112,11,1,0,0,0,113,114,3,14,7,0,114,121,5,41,
		0,0,115,116,5,34,0,0,116,117,3,14,7,0,117,118,5,41,0,0,118,120,1,0,0,0,
		119,115,1,0,0,0,120,123,1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,13,
		1,0,0,0,123,121,1,0,0,0,124,127,5,41,0,0,125,126,5,31,0,0,126,128,5,32,
		0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,15,1,0,0,0,129,139,3,44,22,0,130,
		131,5,19,0,0,131,140,3,36,18,0,132,134,5,27,0,0,133,135,3,28,14,0,134,
		133,1,0,0,0,134,135,1,0,0,0,135,136,1,0,0,0,136,140,5,28,0,0,137,140,5,
		25,0,0,138,140,5,26,0,0,139,130,1,0,0,0,139,132,1,0,0,0,139,137,1,0,0,
		0,139,138,1,0,0,0,140,141,1,0,0,0,141,142,5,33,0,0,142,199,1,0,0,0,143,
		144,5,3,0,0,144,145,5,27,0,0,145,146,3,30,15,0,146,147,5,28,0,0,147,150,
		3,16,8,0,148,149,5,4,0,0,149,151,3,16,8,0,150,148,1,0,0,0,150,151,1,0,
		0,0,151,199,1,0,0,0,152,153,5,5,0,0,153,154,5,27,0,0,154,155,3,36,18,0,
		155,157,5,33,0,0,156,158,3,30,15,0,157,156,1,0,0,0,157,158,1,0,0,0,158,
		159,1,0,0,0,159,161,5,33,0,0,160,162,3,16,8,0,161,160,1,0,0,0,161,162,
		1,0,0,0,162,163,1,0,0,0,163,164,5,28,0,0,164,165,3,16,8,0,165,199,1,0,
		0,0,166,167,5,6,0,0,167,168,5,27,0,0,168,169,3,30,15,0,169,170,5,28,0,
		0,170,171,3,16,8,0,171,199,1,0,0,0,172,173,5,7,0,0,173,199,5,33,0,0,174,
		176,5,8,0,0,175,177,3,36,18,0,176,175,1,0,0,0,176,177,1,0,0,0,177,178,
		1,0,0,0,178,199,5,33,0,0,179,180,5,9,0,0,180,181,5,27,0,0,181,182,3,44,
		22,0,182,183,5,28,0,0,183,184,5,33,0,0,184,199,1,0,0,0,185,186,5,10,0,
		0,186,187,5,27,0,0,187,190,3,36,18,0,188,189,5,34,0,0,189,191,5,37,0,0,
		190,188,1,0,0,0,190,191,1,0,0,0,191,192,1,0,0,0,192,193,5,28,0,0,193,194,
		5,33,0,0,194,199,1,0,0,0,195,199,3,26,13,0,196,199,3,18,9,0,197,199,5,
		33,0,0,198,129,1,0,0,0,198,143,1,0,0,0,198,152,1,0,0,0,198,166,1,0,0,0,
		198,172,1,0,0,0,198,174,1,0,0,0,198,179,1,0,0,0,198,185,1,0,0,0,198,195,
		1,0,0,0,198,196,1,0,0,0,198,197,1,0,0,0,199,17,1,0,0,0,200,201,5,16,0,
		0,201,202,5,27,0,0,202,203,3,36,18,0,203,204,5,28,0,0,204,205,5,29,0,0,
		205,206,3,20,10,0,206,207,5,30,0,0,207,19,1,0,0,0,208,210,3,22,11,0,209,
		208,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,21,1,0,
		0,0,213,211,1,0,0,0,214,216,3,24,12,0,215,214,1,0,0,0,216,217,1,0,0,0,
		217,215,1,0,0,0,217,218,1,0,0,0,218,222,1,0,0,0,219,221,3,16,8,0,220,219,
		1,0,0,0,221,224,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,23,1,0,0,0,
		224,222,1,0,0,0,225,226,5,17,0,0,226,227,3,36,18,0,227,228,5,36,0,0,228,
		232,1,0,0,0,229,230,5,18,0,0,230,232,5,36,0,0,231,225,1,0,0,0,231,229,
		1,0,0,0,232,25,1,0,0,0,233,238,5,29,0,0,234,237,3,6,3,0,235,237,3,16,8,
		0,236,234,1,0,0,0,236,235,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,
		239,1,0,0,0,239,241,1,0,0,0,240,238,1,0,0,0,241,242,5,30,0,0,242,27,1,
		0,0,0,243,248,3,36,18,0,244,245,5,34,0,0,245,247,3,36,18,0,246,244,1,0,
		0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,29,1,0,0,0,250,
		248,1,0,0,0,251,256,3,32,16,0,252,253,5,24,0,0,253,255,3,32,16,0,254,252,
		1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,31,1,0,0,0,
		258,256,1,0,0,0,259,264,3,34,17,0,260,261,5,23,0,0,261,263,3,34,17,0,262,
		260,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,33,1,0,
		0,0,266,264,1,0,0,0,267,268,3,36,18,0,268,269,3,46,23,0,269,270,3,36,18,
		0,270,35,1,0,0,0,271,273,5,20,0,0,272,271,1,0,0,0,272,273,1,0,0,0,273,
		275,1,0,0,0,274,276,3,38,19,0,275,274,1,0,0,0,275,276,1,0,0,0,276,277,
		1,0,0,0,277,282,3,40,20,0,278,279,5,20,0,0,279,281,3,40,20,0,280,278,1,
		0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,37,1,0,0,0,284,
		282,1,0,0,0,285,286,5,27,0,0,286,287,3,14,7,0,287,288,5,28,0,0,288,39,
		1,0,0,0,289,294,3,42,21,0,290,291,5,21,0,0,291,293,3,42,21,0,292,290,1,
		0,0,0,293,296,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,41,1,0,0,0,296,
		294,1,0,0,0,297,303,3,44,22,0,298,300,5,27,0,0,299,301,3,28,14,0,300,299,
		1,0,0,0,300,301,1,0,0,0,301,302,1,0,0,0,302,304,5,28,0,0,303,298,1,0,0,
		0,303,304,1,0,0,0,304,327,1,0,0,0,305,327,5,37,0,0,306,327,5,38,0,0,307,
		327,5,39,0,0,308,327,5,40,0,0,309,327,5,12,0,0,310,327,5,13,0,0,311,327,
		5,14,0,0,312,313,5,11,0,0,313,320,5,41,0,0,314,315,5,31,0,0,315,321,5,
		32,0,0,316,317,5,31,0,0,317,318,3,36,18,0,318,319,5,32,0,0,319,321,1,0,
		0,0,320,314,1,0,0,0,320,316,1,0,0,0,320,321,1,0,0,0,321,327,1,0,0,0,322,
		323,5,27,0,0,323,324,3,36,18,0,324,325,5,28,0,0,325,327,1,0,0,0,326,297,
		1,0,0,0,326,305,1,0,0,0,326,306,1,0,0,0,326,307,1,0,0,0,326,308,1,0,0,
		0,326,309,1,0,0,0,326,310,1,0,0,0,326,311,1,0,0,0,326,312,1,0,0,0,326,
		322,1,0,0,0,327,43,1,0,0,0,328,337,5,41,0,0,329,330,5,35,0,0,330,336,5,
		41,0,0,331,332,5,31,0,0,332,333,3,36,18,0,333,334,5,32,0,0,334,336,1,0,
		0,0,335,329,1,0,0,0,335,331,1,0,0,0,336,339,1,0,0,0,337,335,1,0,0,0,337,
		338,1,0,0,0,338,45,1,0,0,0,339,337,1,0,0,0,340,341,5,22,0,0,341,47,1,0,
		0,0,37,51,60,62,76,85,96,103,108,121,127,134,139,150,157,161,176,190,198,
		211,217,222,231,236,238,248,256,264,272,275,282,294,300,303,320,326,335,
		337
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace parser.generated
