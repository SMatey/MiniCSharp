//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Lizsa/OneDrive/Documents/GitHub/MiniCSharp/MiniCSharp/Grammar/MiniCSharpParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace parser.generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MiniCSharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CLASS=1, VOID=2, IF=3, ELSE=4, FOR=5, WHILE=6, BREAK=7, RETURN=8, READ=9, 
		WRITE=10, NEW=11, TRUE=12, FALSE=13, NULL=14, USING=15, SWITCH=16, CASE=17, 
		DEFAULT=18, ASSIGN=19, ADDOP=20, MULOP=21, RELOP=22, AND=23, OR=24, INCREMENT=25, 
		DECREMENT=26, LPAREN=27, RPAREN=28, LBRACE=29, RBRACE=30, LBRACK=31, RBRACK=32, 
		SEMICOLON=33, COMMA=34, DOT=35, COLON=36, INTLIT=37, DOUBLELIT=38, CHARLIT=39, 
		STRINGLIT=40, ID=41, COMMENT=42, LINECOMMENT=43, WS=44;
	public const int
		RULE_program = 0, RULE_usingDirective = 1, RULE_qualifiedIdentifier = 2, 
		RULE_varDecl = 3, RULE_classDecl = 4, RULE_methodDecl = 5, RULE_formPars = 6, 
		RULE_type = 7, RULE_statement = 8, RULE_forVarDecl = 9, RULE_forInit = 10, 
		RULE_forDeclaredVarPart = 11, RULE_forTypeAndMultipleVars = 12, RULE_forUpdate = 13, 
		RULE_switchStatement = 14, RULE_switchBlock = 15, RULE_switchSection = 16, 
		RULE_switchLabel = 17, RULE_block = 18, RULE_actPars = 19, RULE_condition = 20, 
		RULE_condTerm = 21, RULE_condFact = 22, RULE_expr = 23, RULE_cast = 24, 
		RULE_term = 25, RULE_factor = 26, RULE_designator = 27, RULE_relop = 28;
	public static readonly string[] ruleNames = {
		"program", "usingDirective", "qualifiedIdentifier", "varDecl", "classDecl", 
		"methodDecl", "formPars", "type", "statement", "forVarDecl", "forInit", 
		"forDeclaredVarPart", "forTypeAndMultipleVars", "forUpdate", "switchStatement", 
		"switchBlock", "switchSection", "switchLabel", "block", "actPars", "condition", 
		"condTerm", "condFact", "expr", "cast", "term", "factor", "designator", 
		"relop"
	};

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'void'", "'if'", "'else'", "'for'", "'while'", "'break'", 
		"'return'", "'read'", "'write'", "'new'", "'true'", "'false'", "'null'", 
		"'using'", "'switch'", "'case'", "'default'", "'='", null, null, null, 
		"'&&'", "'||'", "'++'", "'--'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"';'", "','", "'.'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "VOID", "IF", "ELSE", "FOR", "WHILE", "BREAK", "RETURN", 
		"READ", "WRITE", "NEW", "TRUE", "FALSE", "NULL", "USING", "SWITCH", "CASE", 
		"DEFAULT", "ASSIGN", "ADDOP", "MULOP", "RELOP", "AND", "OR", "INCREMENT", 
		"DECREMENT", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
		"SEMICOLON", "COMMA", "DOT", "COLON", "INTLIT", "DOUBLELIT", "CHARLIT", 
		"STRINGLIT", "ID", "COMMENT", "LINECOMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSharpParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniCSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniCSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	 
		public ProgramContext() { }
		public virtual void CopyFrom(ProgramContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProgContext : ProgramContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MiniCSharpParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ProgContext(ProgramContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			_localctx = new ProgContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 58;
				usingDirective();
				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 64;
			Match(CLASS);
			State = 65;
			Match(ID);
			State = 66;
			Match(LBRACE);
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2199023255558L) != 0)) {
				{
				State = 70;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 67;
					varDecl();
					}
					break;
				case 2:
					{
					State = 68;
					classDecl();
					}
					break;
				case 3:
					{
					State = 69;
					methodDecl();
					}
					break;
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 75;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
	 
		public UsingDirectiveContext() { }
		public virtual void CopyFrom(UsingDirectiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UsingStatContext : UsingDirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MiniCSharpParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		public UsingStatContext(UsingDirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterUsingStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitUsingStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_usingDirective);
		try {
			_localctx = new UsingStatContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(USING);
			State = 78;
			qualifiedIdentifier();
			State = 79;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierContext : ParserRuleContext {
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifier; } }
	 
		public QualifiedIdentifierContext() { }
		public virtual void CopyFrom(QualifiedIdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class QualifiedIdentContext : QualifiedIdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MiniCSharpParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MiniCSharpParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MiniCSharpParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MiniCSharpParser.DOT, i);
		}
		public QualifiedIdentContext(QualifiedIdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterQualifiedIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitQualifiedIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierContext qualifiedIdentifier() {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_qualifiedIdentifier);
		int _la;
		try {
			_localctx = new QualifiedIdentContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(ID);
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 82;
				Match(DOT);
				State = 83;
				Match(ID);
				}
				}
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	 
		public VarDeclContext() { }
		public virtual void CopyFrom(VarDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VarDeclarationContext : VarDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MiniCSharpParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MiniCSharpParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(MiniCSharpParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(MiniCSharpParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public VarDeclarationContext(VarDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterVarDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitVarDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_varDecl);
		int _la;
		try {
			_localctx = new VarDeclarationContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			type();
			State = 90;
			Match(ID);
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 91;
				Match(ASSIGN);
				State = 92;
				expr();
				}
			}

			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 95;
				Match(COMMA);
				State = 96;
				Match(ID);
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 97;
					Match(ASSIGN);
					State = 98;
					expr();
					}
				}

				}
				}
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 106;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
	 
		public ClassDeclContext() { }
		public virtual void CopyFrom(ClassDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassDeclarationContext : ClassDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MiniCSharpParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclarationContext(ClassDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_classDecl);
		int _la;
		try {
			_localctx = new ClassDeclarationContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(CLASS);
			State = 109;
			Match(ID);
			State = 110;
			Match(LBRACE);
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 111;
				varDecl();
				}
				}
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 117;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
	 
		public MethodDeclContext() { }
		public virtual void CopyFrom(MethodDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MethodDeclarationContext : MethodDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(MiniCSharpParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public MethodDeclarationContext(MethodDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_methodDecl);
		int _la;
		try {
			_localctx = new MethodDeclarationContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 119;
				type();
				}
				break;
			case VOID:
				{
				State = 120;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 123;
			Match(ID);
			State = 124;
			Match(LPAREN);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 125;
				formPars();
				}
			}

			State = 128;
			Match(RPAREN);
			State = 129;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
	 
		public FormParsContext() { }
		public virtual void CopyFrom(FormParsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FormalParamsContext : FormParsContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MiniCSharpParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MiniCSharpParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public FormalParamsContext(FormParsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterFormalParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitFormalParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(Context, State);
		EnterRule(_localctx, 12, RULE_formPars);
		int _la;
		try {
			_localctx = new FormalParamsContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			type();
			State = 132;
			Match(ID);
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 133;
				Match(COMMA);
				State = 134;
				type();
				State = 135;
				Match(ID);
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeIdentContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MiniCSharpParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MiniCSharpParser.RBRACK, 0); }
		public TypeIdentContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterTypeIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitTypeIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_type);
		int _la;
		try {
			_localctx = new TypeIdentContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(ID);
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 143;
				Match(LBRACK);
				State = 144;
				Match(RBRACK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BreakStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(MiniCSharpParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		public BreakStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MiniCSharpParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MiniCSharpParser.ELSE, 0); }
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MiniCSharpParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		public ReadStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterReadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitReadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MiniCSharpParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DesignatorStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniCSharpParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(MiniCSharpParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(MiniCSharpParser.DECREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public DesignatorStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterDesignatorStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitDesignatorStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WriteStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MiniCSharpParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MiniCSharpParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLIT() { return GetToken(MiniCSharpParser.INTLIT, 0); }
		public WriteStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterWriteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitWriteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SwitchDispatchStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public SwitchDispatchStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitchDispatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitchDispatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchDispatchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MiniCSharpParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MiniCSharpParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(MiniCSharpParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(MiniCSharpParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForUpdateContext forUpdate() {
			return GetRuleContext<ForUpdateContext>(0);
		}
		public ForStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		int _la;
		try {
			State = 217;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				_localctx = new DesignatorStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 147;
				designator();
				State = 157;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASSIGN:
					{
					State = 148;
					Match(ASSIGN);
					State = 149;
					expr();
					}
					break;
				case LPAREN:
					{
					State = 150;
					Match(LPAREN);
					State = 152;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4260742854656L) != 0)) {
						{
						State = 151;
						actPars();
						}
					}

					State = 154;
					Match(RPAREN);
					}
					break;
				case INCREMENT:
					{
					State = 155;
					Match(INCREMENT);
					}
					break;
				case DECREMENT:
					{
					State = 156;
					Match(DECREMENT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 159;
				Match(SEMICOLON);
				}
				break;
			case IF:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 161;
				Match(IF);
				State = 162;
				Match(LPAREN);
				State = 163;
				condition();
				State = 164;
				Match(RPAREN);
				State = 165;
				statement();
				State = 168;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 166;
					Match(ELSE);
					State = 167;
					statement();
					}
					break;
				}
				}
				break;
			case FOR:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 170;
				Match(FOR);
				State = 171;
				Match(LPAREN);
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4260742854656L) != 0)) {
					{
					State = 172;
					forInit();
					}
				}

				State = 175;
				Match(SEMICOLON);
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4260742854656L) != 0)) {
					{
					State = 176;
					condition();
					}
				}

				State = 179;
				Match(SEMICOLON);
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2208150128616L) != 0)) {
					{
					State = 180;
					forUpdate();
					}
				}

				State = 183;
				Match(RPAREN);
				State = 184;
				statement();
				}
				break;
			case WHILE:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 185;
				Match(WHILE);
				State = 186;
				Match(LPAREN);
				State = 187;
				condition();
				State = 188;
				Match(RPAREN);
				State = 189;
				statement();
				}
				break;
			case BREAK:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 191;
				Match(BREAK);
				State = 192;
				Match(SEMICOLON);
				}
				break;
			case RETURN:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 193;
				Match(RETURN);
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4260742854656L) != 0)) {
					{
					State = 194;
					expr();
					}
				}

				State = 197;
				Match(SEMICOLON);
				}
				break;
			case READ:
				_localctx = new ReadStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 198;
				Match(READ);
				State = 199;
				Match(LPAREN);
				State = 200;
				designator();
				State = 201;
				Match(RPAREN);
				State = 202;
				Match(SEMICOLON);
				}
				break;
			case WRITE:
				_localctx = new WriteStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 204;
				Match(WRITE);
				State = 205;
				Match(LPAREN);
				State = 206;
				expr();
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 207;
					Match(COMMA);
					State = 208;
					Match(INTLIT);
					}
				}

				State = 211;
				Match(RPAREN);
				State = 212;
				Match(SEMICOLON);
				}
				break;
			case LBRACE:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 214;
				block();
				}
				break;
			case SWITCH:
				_localctx = new SwitchDispatchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 215;
				switchStatement();
				}
				break;
			case SEMICOLON:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 216;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(MiniCSharpParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(MiniCSharpParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(MiniCSharpParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(MiniCSharpParser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniCSharpParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ForVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterForVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitForVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForVarDeclContext forVarDecl() {
		ForVarDeclContext _localctx = new ForVarDeclContext(Context, State);
		EnterRule(_localctx, 18, RULE_forVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			type();
			State = 220;
			Match(ID);
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 221;
				Match(LBRACK);
				State = 222;
				Match(RBRACK);
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 228;
				Match(ASSIGN);
				State = 229;
				expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForTypeAndMultipleVarsContext forTypeAndMultipleVars() {
			return GetRuleContext<ForTypeAndMultipleVarsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 20, RULE_forInit);
		int _la;
		try {
			State = 241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 232;
				forTypeAndMultipleVars();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 233;
				expr();
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 234;
					Match(COMMA);
					State = 235;
					expr();
					}
					}
					State = 240;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForDeclaredVarPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(MiniCSharpParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(MiniCSharpParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(MiniCSharpParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(MiniCSharpParser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniCSharpParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ForDeclaredVarPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forDeclaredVarPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterForDeclaredVarPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitForDeclaredVarPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForDeclaredVarPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForDeclaredVarPartContext forDeclaredVarPart() {
		ForDeclaredVarPartContext _localctx = new ForDeclaredVarPartContext(Context, State);
		EnterRule(_localctx, 22, RULE_forDeclaredVarPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			Match(ID);
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 244;
				Match(LBRACK);
				State = 245;
				Match(RBRACK);
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 251;
				Match(ASSIGN);
				State = 252;
				expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForTypeAndMultipleVarsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForDeclaredVarPartContext[] forDeclaredVarPart() {
			return GetRuleContexts<ForDeclaredVarPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForDeclaredVarPartContext forDeclaredVarPart(int i) {
			return GetRuleContext<ForDeclaredVarPartContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public ForTypeAndMultipleVarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forTypeAndMultipleVars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterForTypeAndMultipleVars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitForTypeAndMultipleVars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForTypeAndMultipleVars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForTypeAndMultipleVarsContext forTypeAndMultipleVars() {
		ForTypeAndMultipleVarsContext _localctx = new ForTypeAndMultipleVarsContext(Context, State);
		EnterRule(_localctx, 24, RULE_forTypeAndMultipleVars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			type();
			State = 256;
			forDeclaredVarPart();
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 257;
				Match(COMMA);
				State = 258;
				forDeclaredVarPart();
				}
				}
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterForUpdate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitForUpdate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForUpdateContext forUpdate() {
		ForUpdateContext _localctx = new ForUpdateContext(Context, State);
		EnterRule(_localctx, 26, RULE_forUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
	 
		public SwitchStatementContext() { }
		public virtual void CopyFrom(SwitchStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SwitchStatContext : SwitchStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(MiniCSharpParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		public SwitchStatContext(SwitchStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitchStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitchStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_switchStatement);
		try {
			_localctx = new SwitchStatContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			Match(SWITCH);
			State = 267;
			Match(LPAREN);
			State = 268;
			expr();
			State = 269;
			Match(RPAREN);
			State = 270;
			Match(LBRACE);
			State = 271;
			switchBlock();
			State = 272;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
	 
		public SwitchBlockContext() { }
		public virtual void CopyFrom(SwitchBlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SwitchBlockContentContext : SwitchBlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchSectionContext[] switchSection() {
			return GetRuleContexts<SwitchSectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchSectionContext switchSection(int i) {
			return GetRuleContext<SwitchSectionContext>(i);
		}
		public SwitchBlockContentContext(SwitchBlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitchBlockContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitchBlockContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlockContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_switchBlock);
		int _la;
		try {
			_localctx = new SwitchBlockContentContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 274;
				switchSection();
				}
				}
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchSectionContext : ParserRuleContext {
		public SwitchSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchSection; } }
	 
		public SwitchSectionContext() { }
		public virtual void CopyFrom(SwitchSectionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SwitchCaseSectionContext : SwitchSectionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SwitchCaseSectionContext(SwitchSectionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchSectionContext switchSection() {
		SwitchSectionContext _localctx = new SwitchSectionContext(Context, State);
		EnterRule(_localctx, 32, RULE_switchSection);
		int _la;
		try {
			int _alt;
			_localctx = new SwitchCaseSectionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 280;
					switchLabel();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 283;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2208150128616L) != 0)) {
				{
				{
				State = 285;
				statement();
				}
				}
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
	 
		public SwitchLabelContext() { }
		public virtual void CopyFrom(SwitchLabelContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DefaultLabelContext : SwitchLabelContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MiniCSharpParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MiniCSharpParser.COLON, 0); }
		public DefaultLabelContext(SwitchLabelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterDefaultLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitDefaultLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultLabel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseLabelContext : SwitchLabelContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(MiniCSharpParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MiniCSharpParser.COLON, 0); }
		public CaseLabelContext(SwitchLabelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterCaseLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitCaseLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 34, RULE_switchLabel);
		try {
			State = 297;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				_localctx = new CaseLabelContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 291;
				Match(CASE);
				State = 292;
				expr();
				State = 293;
				Match(COLON);
				}
				break;
			case DEFAULT:
				_localctx = new DefaultLabelContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 295;
				Match(DEFAULT);
				State = 296;
				Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockNodeContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockNodeContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterBlockNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitBlockNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 36, RULE_block);
		int _la;
		try {
			_localctx = new BlockNodeContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(LBRACE);
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2208150128616L) != 0)) {
				{
				State = 302;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 300;
					varDecl();
					}
					break;
				case 2:
					{
					State = 301;
					statement();
					}
					break;
				}
				}
				State = 306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 307;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
	 
		public ActParsContext() { }
		public virtual void CopyFrom(ActParsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ActualParamsContext : ActParsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public ActualParamsContext(ActParsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterActualParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitActualParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(Context, State);
		EnterRule(_localctx, 38, RULE_actPars);
		int _la;
		try {
			_localctx = new ActualParamsContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			expr();
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 310;
				Match(COMMA);
				State = 311;
				expr();
				}
				}
				State = 316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	 
		public ConditionContext() { }
		public virtual void CopyFrom(ConditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConditionNodeContext : ConditionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext[] condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(MiniCSharpParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(MiniCSharpParser.OR, i);
		}
		public ConditionNodeContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterConditionNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitConditionNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 40, RULE_condition);
		int _la;
		try {
			_localctx = new ConditionNodeContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			condTerm();
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 318;
				Match(OR);
				State = 319;
				condTerm();
				}
				}
				State = 324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
	 
		public CondTermContext() { }
		public virtual void CopyFrom(CondTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConditionTermNodeContext : CondTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MiniCSharpParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MiniCSharpParser.AND, i);
		}
		public ConditionTermNodeContext(CondTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterConditionTermNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitConditionTermNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionTermNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(Context, State);
		EnterRule(_localctx, 42, RULE_condTerm);
		int _la;
		try {
			_localctx = new ConditionTermNodeContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			condFact();
			State = 330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 326;
				Match(AND);
				State = 327;
				condFact();
				}
				}
				State = 332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
	 
		public CondFactContext() { }
		public virtual void CopyFrom(CondFactContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConditionFactNodeContext : CondFactContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public ConditionFactNodeContext(CondFactContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterConditionFactNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitConditionFactNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionFactNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(Context, State);
		EnterRule(_localctx, 44, RULE_condFact);
		try {
			_localctx = new ConditionFactNodeContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			expr();
			State = 334;
			relop();
			State = 335;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADDOP() { return GetTokens(MiniCSharpParser.ADDOP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDOP(int i) {
			return GetToken(MiniCSharpParser.ADDOP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		public ExpressionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 46, RULE_expr);
		int _la;
		try {
			_localctx = new ExpressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADDOP) {
				{
				State = 337;
				Match(ADDOP);
				}
			}

			State = 341;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 340;
				cast();
				}
				break;
			}
			State = 343;
			term();
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ADDOP) {
				{
				{
				State = 344;
				Match(ADDOP);
				State = 345;
				term();
				}
				}
				State = 350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
	 
		public CastContext() { }
		public virtual void CopyFrom(CastContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeCastContext : CastContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		public TypeCastContext(CastContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterTypeCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitTypeCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeCast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 48, RULE_cast);
		try {
			_localctx = new TypeCastContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			Match(LPAREN);
			State = 352;
			type();
			State = 353;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermNodeContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULOP() { return GetTokens(MiniCSharpParser.MULOP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULOP(int i) {
			return GetToken(MiniCSharpParser.MULOP, i);
		}
		public TermNodeContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterTermNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitTermNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 50, RULE_term);
		int _la;
		try {
			_localctx = new TermNodeContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			factor();
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULOP) {
				{
				{
				State = 356;
				Match(MULOP);
				State = 357;
				factor();
				}
				}
				State = 362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenExpressionFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		public ParenExpressionFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterParenExpressionFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitParenExpressionFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpressionFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLitFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLIT() { return GetToken(MiniCSharpParser.STRINGLIT, 0); }
		public StringLitFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterStringLitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitStringLitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLitFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(MiniCSharpParser.NULL, 0); }
		public NullLitFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterNullLitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitNullLitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewObjectFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(MiniCSharpParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public NewObjectFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterNewObjectFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitNewObjectFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DesignatorFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public DesignatorFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterDesignatorFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitDesignatorFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleLitFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLELIT() { return GetToken(MiniCSharpParser.DOUBLELIT, 0); }
		public DoubleLitFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterDoubleLitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitDoubleLitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleLitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrueLitFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(MiniCSharpParser.TRUE, 0); }
		public TrueLitFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterTrueLitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitTrueLitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrueLitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FalseLitFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(MiniCSharpParser.FALSE, 0); }
		public FalseLitFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterFalseLitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitFalseLitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalseLitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharLitFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARLIT() { return GetToken(MiniCSharpParser.CHARLIT, 0); }
		public CharLitFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterCharLitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitCharLitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLitFactorContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLIT() { return GetToken(MiniCSharpParser.INTLIT, 0); }
		public IntLitFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterIntLitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitIntLitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 52, RULE_factor);
		int _la;
		try {
			State = 391;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				_localctx = new DesignatorFactorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 363;
				designator();
				State = 369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 364;
					Match(LPAREN);
					State = 366;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4260742854656L) != 0)) {
						{
						State = 365;
						actPars();
						}
					}

					State = 368;
					Match(RPAREN);
					}
				}

				}
				break;
			case INTLIT:
				_localctx = new IntLitFactorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 371;
				Match(INTLIT);
				}
				break;
			case DOUBLELIT:
				_localctx = new DoubleLitFactorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 372;
				Match(DOUBLELIT);
				}
				break;
			case CHARLIT:
				_localctx = new CharLitFactorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 373;
				Match(CHARLIT);
				}
				break;
			case STRINGLIT:
				_localctx = new StringLitFactorContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 374;
				Match(STRINGLIT);
				}
				break;
			case TRUE:
				_localctx = new TrueLitFactorContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 375;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new FalseLitFactorContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 376;
				Match(FALSE);
				}
				break;
			case NULL:
				_localctx = new NullLitFactorContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 377;
				Match(NULL);
				}
				break;
			case NEW:
				_localctx = new NewObjectFactorContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 378;
				Match(NEW);
				State = 379;
				Match(ID);
				State = 385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 380;
					Match(LPAREN);
					State = 382;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4260742854656L) != 0)) {
						{
						State = 381;
						actPars();
						}
					}

					State = 384;
					Match(RPAREN);
					}
				}

				}
				break;
			case LPAREN:
				_localctx = new ParenExpressionFactorContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 387;
				Match(LPAREN);
				State = 388;
				expr();
				State = 389;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
	 
		public DesignatorContext() { }
		public virtual void CopyFrom(DesignatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DesignatorNodeContext : DesignatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MiniCSharpParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MiniCSharpParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MiniCSharpParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MiniCSharpParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(MiniCSharpParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(MiniCSharpParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(MiniCSharpParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(MiniCSharpParser.RBRACK, i);
		}
		public DesignatorNodeContext(DesignatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterDesignatorNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitDesignatorNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 54, RULE_designator);
		int _la;
		try {
			_localctx = new DesignatorNodeContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			Match(ID);
			State = 402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK || _la==DOT) {
				{
				State = 400;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 394;
					Match(DOT);
					State = 395;
					Match(ID);
					}
					break;
				case LBRACK:
					{
					State = 396;
					Match(LBRACK);
					State = 397;
					expr();
					State = 398;
					Match(RBRACK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
	 
		public RelopContext() { }
		public virtual void CopyFrom(RelopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RelationalOpContext : RelopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOP() { return GetToken(MiniCSharpParser.RELOP, 0); }
		public RelationalOpContext(RelopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterRelationalOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitRelationalOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 56, RULE_relop);
		try {
			_localctx = new RelationalOpContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			Match(RELOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,44,408,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		1,0,5,0,60,8,0,10,0,12,0,63,9,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,71,8,0,10,
		0,12,0,74,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,5,2,85,8,2,10,2,12,2,
		88,9,2,1,3,1,3,1,3,1,3,3,3,94,8,3,1,3,1,3,1,3,1,3,3,3,100,8,3,5,3,102,
		8,3,10,3,12,3,105,9,3,1,3,1,3,1,4,1,4,1,4,1,4,5,4,113,8,4,10,4,12,4,116,
		9,4,1,4,1,4,1,5,1,5,3,5,122,8,5,1,5,1,5,1,5,3,5,127,8,5,1,5,1,5,1,5,1,
		6,1,6,1,6,1,6,1,6,1,6,5,6,138,8,6,10,6,12,6,141,9,6,1,7,1,7,1,7,3,7,146,
		8,7,1,8,1,8,1,8,1,8,1,8,3,8,153,8,8,1,8,1,8,1,8,3,8,158,8,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,169,8,8,1,8,1,8,1,8,3,8,174,8,8,1,8,1,8,
		3,8,178,8,8,1,8,1,8,3,8,182,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,3,8,196,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		3,8,210,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,218,8,8,1,9,1,9,1,9,1,9,5,9,224,
		8,9,10,9,12,9,227,9,9,1,9,1,9,3,9,231,8,9,1,10,1,10,1,10,1,10,5,10,237,
		8,10,10,10,12,10,240,9,10,3,10,242,8,10,1,11,1,11,1,11,5,11,247,8,11,10,
		11,12,11,250,9,11,1,11,1,11,3,11,254,8,11,1,12,1,12,1,12,1,12,5,12,260,
		8,12,10,12,12,12,263,9,12,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,15,5,15,276,8,15,10,15,12,15,279,9,15,1,16,4,16,282,8,16,11,16,
		12,16,283,1,16,5,16,287,8,16,10,16,12,16,290,9,16,1,17,1,17,1,17,1,17,
		1,17,1,17,3,17,298,8,17,1,18,1,18,1,18,5,18,303,8,18,10,18,12,18,306,9,
		18,1,18,1,18,1,19,1,19,1,19,5,19,313,8,19,10,19,12,19,316,9,19,1,20,1,
		20,1,20,5,20,321,8,20,10,20,12,20,324,9,20,1,21,1,21,1,21,5,21,329,8,21,
		10,21,12,21,332,9,21,1,22,1,22,1,22,1,22,1,23,3,23,339,8,23,1,23,3,23,
		342,8,23,1,23,1,23,1,23,5,23,347,8,23,10,23,12,23,350,9,23,1,24,1,24,1,
		24,1,24,1,25,1,25,1,25,5,25,359,8,25,10,25,12,25,362,9,25,1,26,1,26,1,
		26,3,26,367,8,26,1,26,3,26,370,8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
		1,26,1,26,1,26,1,26,3,26,383,8,26,1,26,3,26,386,8,26,1,26,1,26,1,26,1,
		26,3,26,392,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,5,27,401,8,27,10,27,
		12,27,404,9,27,1,28,1,28,1,28,0,0,29,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,0,0,446,0,61,1,0,0,0,2,
		77,1,0,0,0,4,81,1,0,0,0,6,89,1,0,0,0,8,108,1,0,0,0,10,121,1,0,0,0,12,131,
		1,0,0,0,14,142,1,0,0,0,16,217,1,0,0,0,18,219,1,0,0,0,20,241,1,0,0,0,22,
		243,1,0,0,0,24,255,1,0,0,0,26,264,1,0,0,0,28,266,1,0,0,0,30,277,1,0,0,
		0,32,281,1,0,0,0,34,297,1,0,0,0,36,299,1,0,0,0,38,309,1,0,0,0,40,317,1,
		0,0,0,42,325,1,0,0,0,44,333,1,0,0,0,46,338,1,0,0,0,48,351,1,0,0,0,50,355,
		1,0,0,0,52,391,1,0,0,0,54,393,1,0,0,0,56,405,1,0,0,0,58,60,3,2,1,0,59,
		58,1,0,0,0,60,63,1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,64,1,0,0,0,63,
		61,1,0,0,0,64,65,5,1,0,0,65,66,5,41,0,0,66,72,5,29,0,0,67,71,3,6,3,0,68,
		71,3,8,4,0,69,71,3,10,5,0,70,67,1,0,0,0,70,68,1,0,0,0,70,69,1,0,0,0,71,
		74,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,75,1,0,0,0,74,72,1,0,0,0,75,
		76,5,30,0,0,76,1,1,0,0,0,77,78,5,15,0,0,78,79,3,4,2,0,79,80,5,33,0,0,80,
		3,1,0,0,0,81,86,5,41,0,0,82,83,5,35,0,0,83,85,5,41,0,0,84,82,1,0,0,0,85,
		88,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,5,1,0,0,0,88,86,1,0,0,0,89,90,
		3,14,7,0,90,93,5,41,0,0,91,92,5,19,0,0,92,94,3,46,23,0,93,91,1,0,0,0,93,
		94,1,0,0,0,94,103,1,0,0,0,95,96,5,34,0,0,96,99,5,41,0,0,97,98,5,19,0,0,
		98,100,3,46,23,0,99,97,1,0,0,0,99,100,1,0,0,0,100,102,1,0,0,0,101,95,1,
		0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,103,104,1,0,0,0,104,106,1,0,0,0,
		105,103,1,0,0,0,106,107,5,33,0,0,107,7,1,0,0,0,108,109,5,1,0,0,109,110,
		5,41,0,0,110,114,5,29,0,0,111,113,3,6,3,0,112,111,1,0,0,0,113,116,1,0,
		0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,117,1,0,0,0,116,114,1,0,0,0,117,
		118,5,30,0,0,118,9,1,0,0,0,119,122,3,14,7,0,120,122,5,2,0,0,121,119,1,
		0,0,0,121,120,1,0,0,0,122,123,1,0,0,0,123,124,5,41,0,0,124,126,5,27,0,
		0,125,127,3,12,6,0,126,125,1,0,0,0,126,127,1,0,0,0,127,128,1,0,0,0,128,
		129,5,28,0,0,129,130,3,36,18,0,130,11,1,0,0,0,131,132,3,14,7,0,132,139,
		5,41,0,0,133,134,5,34,0,0,134,135,3,14,7,0,135,136,5,41,0,0,136,138,1,
		0,0,0,137,133,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,
		140,13,1,0,0,0,141,139,1,0,0,0,142,145,5,41,0,0,143,144,5,31,0,0,144,146,
		5,32,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,15,1,0,0,0,147,157,3,54,27,
		0,148,149,5,19,0,0,149,158,3,46,23,0,150,152,5,27,0,0,151,153,3,38,19,
		0,152,151,1,0,0,0,152,153,1,0,0,0,153,154,1,0,0,0,154,158,5,28,0,0,155,
		158,5,25,0,0,156,158,5,26,0,0,157,148,1,0,0,0,157,150,1,0,0,0,157,155,
		1,0,0,0,157,156,1,0,0,0,158,159,1,0,0,0,159,160,5,33,0,0,160,218,1,0,0,
		0,161,162,5,3,0,0,162,163,5,27,0,0,163,164,3,40,20,0,164,165,5,28,0,0,
		165,168,3,16,8,0,166,167,5,4,0,0,167,169,3,16,8,0,168,166,1,0,0,0,168,
		169,1,0,0,0,169,218,1,0,0,0,170,171,5,5,0,0,171,173,5,27,0,0,172,174,3,
		20,10,0,173,172,1,0,0,0,173,174,1,0,0,0,174,175,1,0,0,0,175,177,5,33,0,
		0,176,178,3,40,20,0,177,176,1,0,0,0,177,178,1,0,0,0,178,179,1,0,0,0,179,
		181,5,33,0,0,180,182,3,26,13,0,181,180,1,0,0,0,181,182,1,0,0,0,182,183,
		1,0,0,0,183,184,5,28,0,0,184,218,3,16,8,0,185,186,5,6,0,0,186,187,5,27,
		0,0,187,188,3,40,20,0,188,189,5,28,0,0,189,190,3,16,8,0,190,218,1,0,0,
		0,191,192,5,7,0,0,192,218,5,33,0,0,193,195,5,8,0,0,194,196,3,46,23,0,195,
		194,1,0,0,0,195,196,1,0,0,0,196,197,1,0,0,0,197,218,5,33,0,0,198,199,5,
		9,0,0,199,200,5,27,0,0,200,201,3,54,27,0,201,202,5,28,0,0,202,203,5,33,
		0,0,203,218,1,0,0,0,204,205,5,10,0,0,205,206,5,27,0,0,206,209,3,46,23,
		0,207,208,5,34,0,0,208,210,5,37,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,
		211,1,0,0,0,211,212,5,28,0,0,212,213,5,33,0,0,213,218,1,0,0,0,214,218,
		3,36,18,0,215,218,3,28,14,0,216,218,5,33,0,0,217,147,1,0,0,0,217,161,1,
		0,0,0,217,170,1,0,0,0,217,185,1,0,0,0,217,191,1,0,0,0,217,193,1,0,0,0,
		217,198,1,0,0,0,217,204,1,0,0,0,217,214,1,0,0,0,217,215,1,0,0,0,217,216,
		1,0,0,0,218,17,1,0,0,0,219,220,3,14,7,0,220,225,5,41,0,0,221,222,5,31,
		0,0,222,224,5,32,0,0,223,221,1,0,0,0,224,227,1,0,0,0,225,223,1,0,0,0,225,
		226,1,0,0,0,226,230,1,0,0,0,227,225,1,0,0,0,228,229,5,19,0,0,229,231,3,
		46,23,0,230,228,1,0,0,0,230,231,1,0,0,0,231,19,1,0,0,0,232,242,3,24,12,
		0,233,238,3,46,23,0,234,235,5,34,0,0,235,237,3,46,23,0,236,234,1,0,0,0,
		237,240,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,242,1,0,0,0,240,238,
		1,0,0,0,241,232,1,0,0,0,241,233,1,0,0,0,242,21,1,0,0,0,243,248,5,41,0,
		0,244,245,5,31,0,0,245,247,5,32,0,0,246,244,1,0,0,0,247,250,1,0,0,0,248,
		246,1,0,0,0,248,249,1,0,0,0,249,253,1,0,0,0,250,248,1,0,0,0,251,252,5,
		19,0,0,252,254,3,46,23,0,253,251,1,0,0,0,253,254,1,0,0,0,254,23,1,0,0,
		0,255,256,3,14,7,0,256,261,3,22,11,0,257,258,5,34,0,0,258,260,3,22,11,
		0,259,257,1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,
		25,1,0,0,0,263,261,1,0,0,0,264,265,3,16,8,0,265,27,1,0,0,0,266,267,5,16,
		0,0,267,268,5,27,0,0,268,269,3,46,23,0,269,270,5,28,0,0,270,271,5,29,0,
		0,271,272,3,30,15,0,272,273,5,30,0,0,273,29,1,0,0,0,274,276,3,32,16,0,
		275,274,1,0,0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,31,
		1,0,0,0,279,277,1,0,0,0,280,282,3,34,17,0,281,280,1,0,0,0,282,283,1,0,
		0,0,283,281,1,0,0,0,283,284,1,0,0,0,284,288,1,0,0,0,285,287,3,16,8,0,286,
		285,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,33,1,0,
		0,0,290,288,1,0,0,0,291,292,5,17,0,0,292,293,3,46,23,0,293,294,5,36,0,
		0,294,298,1,0,0,0,295,296,5,18,0,0,296,298,5,36,0,0,297,291,1,0,0,0,297,
		295,1,0,0,0,298,35,1,0,0,0,299,304,5,29,0,0,300,303,3,6,3,0,301,303,3,
		16,8,0,302,300,1,0,0,0,302,301,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,
		304,305,1,0,0,0,305,307,1,0,0,0,306,304,1,0,0,0,307,308,5,30,0,0,308,37,
		1,0,0,0,309,314,3,46,23,0,310,311,5,34,0,0,311,313,3,46,23,0,312,310,1,
		0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,39,1,0,0,0,316,
		314,1,0,0,0,317,322,3,42,21,0,318,319,5,24,0,0,319,321,3,42,21,0,320,318,
		1,0,0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,41,1,0,0,0,
		324,322,1,0,0,0,325,330,3,44,22,0,326,327,5,23,0,0,327,329,3,44,22,0,328,
		326,1,0,0,0,329,332,1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,43,1,0,
		0,0,332,330,1,0,0,0,333,334,3,46,23,0,334,335,3,56,28,0,335,336,3,46,23,
		0,336,45,1,0,0,0,337,339,5,20,0,0,338,337,1,0,0,0,338,339,1,0,0,0,339,
		341,1,0,0,0,340,342,3,48,24,0,341,340,1,0,0,0,341,342,1,0,0,0,342,343,
		1,0,0,0,343,348,3,50,25,0,344,345,5,20,0,0,345,347,3,50,25,0,346,344,1,
		0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,47,1,0,0,0,350,
		348,1,0,0,0,351,352,5,27,0,0,352,353,3,14,7,0,353,354,5,28,0,0,354,49,
		1,0,0,0,355,360,3,52,26,0,356,357,5,21,0,0,357,359,3,52,26,0,358,356,1,
		0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,51,1,0,0,0,362,
		360,1,0,0,0,363,369,3,54,27,0,364,366,5,27,0,0,365,367,3,38,19,0,366,365,
		1,0,0,0,366,367,1,0,0,0,367,368,1,0,0,0,368,370,5,28,0,0,369,364,1,0,0,
		0,369,370,1,0,0,0,370,392,1,0,0,0,371,392,5,37,0,0,372,392,5,38,0,0,373,
		392,5,39,0,0,374,392,5,40,0,0,375,392,5,12,0,0,376,392,5,13,0,0,377,392,
		5,14,0,0,378,379,5,11,0,0,379,385,5,41,0,0,380,382,5,27,0,0,381,383,3,
		38,19,0,382,381,1,0,0,0,382,383,1,0,0,0,383,384,1,0,0,0,384,386,5,28,0,
		0,385,380,1,0,0,0,385,386,1,0,0,0,386,392,1,0,0,0,387,388,5,27,0,0,388,
		389,3,46,23,0,389,390,5,28,0,0,390,392,1,0,0,0,391,363,1,0,0,0,391,371,
		1,0,0,0,391,372,1,0,0,0,391,373,1,0,0,0,391,374,1,0,0,0,391,375,1,0,0,
		0,391,376,1,0,0,0,391,377,1,0,0,0,391,378,1,0,0,0,391,387,1,0,0,0,392,
		53,1,0,0,0,393,402,5,41,0,0,394,395,5,35,0,0,395,401,5,41,0,0,396,397,
		5,31,0,0,397,398,3,46,23,0,398,399,5,32,0,0,399,401,1,0,0,0,400,394,1,
		0,0,0,400,396,1,0,0,0,401,404,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,
		403,55,1,0,0,0,404,402,1,0,0,0,405,406,5,22,0,0,406,57,1,0,0,0,48,61,70,
		72,86,93,99,103,114,121,126,139,145,152,157,168,173,177,181,195,209,217,
		225,230,238,241,248,253,261,277,283,288,297,302,304,314,322,330,338,341,
		348,360,366,369,382,385,391,400,402
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace parser.generated
