//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Lizsa/OneDrive/Documents/GitHub/MiniCSharp/MiniCSharp/Grammar/MiniCSharpParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace parser.generated {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="MiniCSharpParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface IMiniCSharpParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>Prog</c>
	/// labeled alternative in <see cref="MiniCSharpParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProg([NotNull] MiniCSharpParser.ProgContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Prog</c>
	/// labeled alternative in <see cref="MiniCSharpParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProg([NotNull] MiniCSharpParser.ProgContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UsingStat</c>
	/// labeled alternative in <see cref="MiniCSharpParser.usingDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUsingStat([NotNull] MiniCSharpParser.UsingStatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UsingStat</c>
	/// labeled alternative in <see cref="MiniCSharpParser.usingDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUsingStat([NotNull] MiniCSharpParser.UsingStatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>QualifiedIdent</c>
	/// labeled alternative in <see cref="MiniCSharpParser.qualifiedIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQualifiedIdent([NotNull] MiniCSharpParser.QualifiedIdentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>QualifiedIdent</c>
	/// labeled alternative in <see cref="MiniCSharpParser.qualifiedIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQualifiedIdent([NotNull] MiniCSharpParser.QualifiedIdentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VarDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.varDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarDeclaration([NotNull] MiniCSharpParser.VarDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VarDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.varDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarDeclaration([NotNull] MiniCSharpParser.VarDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ClassDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.classDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassDeclaration([NotNull] MiniCSharpParser.ClassDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ClassDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.classDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassDeclaration([NotNull] MiniCSharpParser.ClassDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.methodDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodDeclaration([NotNull] MiniCSharpParser.MethodDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.methodDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodDeclaration([NotNull] MiniCSharpParser.MethodDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FormalParams</c>
	/// labeled alternative in <see cref="MiniCSharpParser.formPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormalParams([NotNull] MiniCSharpParser.FormalParamsContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FormalParams</c>
	/// labeled alternative in <see cref="MiniCSharpParser.formPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormalParams([NotNull] MiniCSharpParser.FormalParamsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeIdent</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeIdent([NotNull] MiniCSharpParser.TypeIdentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeIdent</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeIdent([NotNull] MiniCSharpParser.TypeIdentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DesignatorStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDesignatorStatement([NotNull] MiniCSharpParser.DesignatorStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DesignatorStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDesignatorStatement([NotNull] MiniCSharpParser.DesignatorStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] MiniCSharpParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] MiniCSharpParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] MiniCSharpParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] MiniCSharpParser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] MiniCSharpParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] MiniCSharpParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BreakStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreakStatement([NotNull] MiniCSharpParser.BreakStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BreakStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreakStatement([NotNull] MiniCSharpParser.BreakStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] MiniCSharpParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] MiniCSharpParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ReadStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReadStatement([NotNull] MiniCSharpParser.ReadStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ReadStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReadStatement([NotNull] MiniCSharpParser.ReadStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WriteStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWriteStatement([NotNull] MiniCSharpParser.WriteStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WriteStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWriteStatement([NotNull] MiniCSharpParser.WriteStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BlockStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlockStatement([NotNull] MiniCSharpParser.BlockStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BlockStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlockStatement([NotNull] MiniCSharpParser.BlockStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchDispatchStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchDispatchStatement([NotNull] MiniCSharpParser.SwitchDispatchStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchDispatchStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchDispatchStatement([NotNull] MiniCSharpParser.SwitchDispatchStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EmptyStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmptyStatement([NotNull] MiniCSharpParser.EmptyStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EmptyStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmptyStatement([NotNull] MiniCSharpParser.EmptyStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchStat</c>
	/// labeled alternative in <see cref="MiniCSharpParser.switchStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchStat([NotNull] MiniCSharpParser.SwitchStatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchStat</c>
	/// labeled alternative in <see cref="MiniCSharpParser.switchStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchStat([NotNull] MiniCSharpParser.SwitchStatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchBlockContent</c>
	/// labeled alternative in <see cref="MiniCSharpParser.switchBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchBlockContent([NotNull] MiniCSharpParser.SwitchBlockContentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchBlockContent</c>
	/// labeled alternative in <see cref="MiniCSharpParser.switchBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchBlockContent([NotNull] MiniCSharpParser.SwitchBlockContentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchCaseSection</c>
	/// labeled alternative in <see cref="MiniCSharpParser.switchSection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchCaseSection([NotNull] MiniCSharpParser.SwitchCaseSectionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchCaseSection</c>
	/// labeled alternative in <see cref="MiniCSharpParser.switchSection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchCaseSection([NotNull] MiniCSharpParser.SwitchCaseSectionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CaseLabel</c>
	/// labeled alternative in <see cref="MiniCSharpParser.switchLabel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseLabel([NotNull] MiniCSharpParser.CaseLabelContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CaseLabel</c>
	/// labeled alternative in <see cref="MiniCSharpParser.switchLabel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseLabel([NotNull] MiniCSharpParser.CaseLabelContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DefaultLabel</c>
	/// labeled alternative in <see cref="MiniCSharpParser.switchLabel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefaultLabel([NotNull] MiniCSharpParser.DefaultLabelContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DefaultLabel</c>
	/// labeled alternative in <see cref="MiniCSharpParser.switchLabel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefaultLabel([NotNull] MiniCSharpParser.DefaultLabelContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BlockNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlockNode([NotNull] MiniCSharpParser.BlockNodeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BlockNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlockNode([NotNull] MiniCSharpParser.BlockNodeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ActualParams</c>
	/// labeled alternative in <see cref="MiniCSharpParser.actPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterActualParams([NotNull] MiniCSharpParser.ActualParamsContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ActualParams</c>
	/// labeled alternative in <see cref="MiniCSharpParser.actPars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitActualParams([NotNull] MiniCSharpParser.ActualParamsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConditionNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionNode([NotNull] MiniCSharpParser.ConditionNodeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConditionNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionNode([NotNull] MiniCSharpParser.ConditionNodeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConditionTermNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.condTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionTermNode([NotNull] MiniCSharpParser.ConditionTermNodeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConditionTermNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.condTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionTermNode([NotNull] MiniCSharpParser.ConditionTermNodeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConditionFactNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.condFact"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionFactNode([NotNull] MiniCSharpParser.ConditionFactNodeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConditionFactNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.condFact"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionFactNode([NotNull] MiniCSharpParser.ConditionFactNodeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Expression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] MiniCSharpParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Expression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] MiniCSharpParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeCast</c>
	/// labeled alternative in <see cref="MiniCSharpParser.cast"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeCast([NotNull] MiniCSharpParser.TypeCastContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeCast</c>
	/// labeled alternative in <see cref="MiniCSharpParser.cast"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeCast([NotNull] MiniCSharpParser.TypeCastContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TermNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTermNode([NotNull] MiniCSharpParser.TermNodeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TermNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTermNode([NotNull] MiniCSharpParser.TermNodeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DesignatorFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDesignatorFactor([NotNull] MiniCSharpParser.DesignatorFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DesignatorFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDesignatorFactor([NotNull] MiniCSharpParser.DesignatorFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntLitFactor([NotNull] MiniCSharpParser.IntLitFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntLitFactor([NotNull] MiniCSharpParser.IntLitFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DoubleLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDoubleLitFactor([NotNull] MiniCSharpParser.DoubleLitFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DoubleLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDoubleLitFactor([NotNull] MiniCSharpParser.DoubleLitFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CharLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharLitFactor([NotNull] MiniCSharpParser.CharLitFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CharLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharLitFactor([NotNull] MiniCSharpParser.CharLitFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StringLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringLitFactor([NotNull] MiniCSharpParser.StringLitFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StringLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringLitFactor([NotNull] MiniCSharpParser.StringLitFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TrueLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTrueLitFactor([NotNull] MiniCSharpParser.TrueLitFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TrueLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTrueLitFactor([NotNull] MiniCSharpParser.TrueLitFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FalseLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFalseLitFactor([NotNull] MiniCSharpParser.FalseLitFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FalseLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFalseLitFactor([NotNull] MiniCSharpParser.FalseLitFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NullLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNullLitFactor([NotNull] MiniCSharpParser.NullLitFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NullLitFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNullLitFactor([NotNull] MiniCSharpParser.NullLitFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NewObjectFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewObjectFactor([NotNull] MiniCSharpParser.NewObjectFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NewObjectFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewObjectFactor([NotNull] MiniCSharpParser.NewObjectFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenExpressionFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenExpressionFactor([NotNull] MiniCSharpParser.ParenExpressionFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenExpressionFactor</c>
	/// labeled alternative in <see cref="MiniCSharpParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenExpressionFactor([NotNull] MiniCSharpParser.ParenExpressionFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DesignatorNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.designator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDesignatorNode([NotNull] MiniCSharpParser.DesignatorNodeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DesignatorNode</c>
	/// labeled alternative in <see cref="MiniCSharpParser.designator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDesignatorNode([NotNull] MiniCSharpParser.DesignatorNodeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RelationalOp</c>
	/// labeled alternative in <see cref="MiniCSharpParser.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelationalOp([NotNull] MiniCSharpParser.RelationalOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RelationalOp</c>
	/// labeled alternative in <see cref="MiniCSharpParser.relop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelationalOp([NotNull] MiniCSharpParser.RelationalOpContext context);
}
} // namespace parser.generated
