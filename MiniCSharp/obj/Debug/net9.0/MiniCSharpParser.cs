//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\casam\OneDrive\Documentos\Anio 2025\semestre 1\QA\MiniCSharp\MiniCSharp\Grammar\MiniCSharpParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MiniCSharp.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MiniCSharpParser : Parser {
	public const int
		CLASS=1, VOID=2, IF=3, ELSE=4, FOR=5, WHILE=6, BREAK=7, RETURN=8, READ=9, 
		WRITE=10, NEW=11, TRUE=12, FALSE=13, NULL=14, ASSIGN=15, ADDOP=16, MULOP=17, 
		RELOP=18, AND=19, OR=20, INCREMENT=21, DECREMENT=22, LPAREN=23, RPAREN=24, 
		LBRACE=25, RBRACE=26, LBRACK=27, RBRACK=28, SEMICOLON=29, COMMA=30, DOT=31, 
		INTLIT=32, DOUBLELIT=33, CHARLIT=34, STRINGLIT=35, ID=36, COMMENT=37, 
		LINECOMMENT=38, WS=39;
	public const int
		RULE_program = 0, RULE_varDecl = 1, RULE_classDecl = 2, RULE_methodDecl = 3, 
		RULE_formPars = 4, RULE_type = 5, RULE_statement = 6, RULE_block = 7, 
		RULE_actPars = 8, RULE_condition = 9, RULE_condTerm = 10, RULE_condFact = 11, 
		RULE_expr = 12, RULE_cast = 13, RULE_term = 14, RULE_factor = 15, RULE_designator = 16, 
		RULE_relop = 17;
	public static readonly string[] ruleNames = {
		"program", "varDecl", "classDecl", "methodDecl", "formPars", "type", "statement", 
		"block", "actPars", "condition", "condTerm", "condFact", "expr", "cast", 
		"term", "factor", "designator", "relop"
	};

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'void'", "'if'", "'else'", "'for'", "'while'", "'break'", 
		"'return'", "'read'", "'write'", "'new'", "'true'", "'false'", "'null'", 
		"'='", null, null, null, "'&&'", "'||'", "'++'", "'--'", "'('", "')'", 
		"'{'", "'}'", "'['", "']'", "';'", "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "VOID", "IF", "ELSE", "FOR", "WHILE", "BREAK", "RETURN", 
		"READ", "WRITE", "NEW", "TRUE", "FALSE", "NULL", "ASSIGN", "ADDOP", "MULOP", 
		"RELOP", "AND", "OR", "INCREMENT", "DECREMENT", "LPAREN", "RPAREN", "LBRACE", 
		"RBRACE", "LBRACK", "RBRACK", "SEMICOLON", "COMMA", "DOT", "INTLIT", "DOUBLELIT", 
		"CHARLIT", "STRINGLIT", "ID", "COMMENT", "LINECOMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSharpParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MiniCSharpParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(MiniCSharpParser.CLASS, 0); }
		public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(CLASS);
			State = 37; Match(ID);
			State = 38; Match(LBRACE);
			State = 44;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << VOID) | (1L << ID))) != 0)) {
				{
				State = 42;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
				case 1:
					{
					State = 39; varDecl();
					}
					break;

				case 2:
					{
					State = 40; classDecl();
					}
					break;

				case 3:
					{
					State = 41; methodDecl();
					}
					break;
				}
				}
				State = 46;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 47; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] ID() { return GetTokens(MiniCSharpParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(MiniCSharpParser.ID, i);
		}
		public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; type();
			State = 50; Match(ID);
			State = 55;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 51; Match(COMMA);
				State = 52; Match(ID);
				}
				}
				State = 57;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 58; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(MiniCSharpParser.CLASS, 0); }
		public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(CLASS);
			State = 61; Match(ID);
			State = 62; Match(LBRACE);
			State = 66;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ID) {
				{
				{
				State = 63; varDecl();
				}
				}
				State = 68;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 69; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(MiniCSharpParser.VOID, 0); }
		public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterMethodDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitMethodDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_methodDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				{
				State = 71; type();
				}
				break;
			case VOID:
				{
				State = 72; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 75; Match(ID);
			State = 76; Match(LPAREN);
			State = 78;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ID) {
				{
				State = 77; formPars();
				}
			}

			State = 80; Match(RPAREN);
			State = 81; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] ID() { return GetTokens(MiniCSharpParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(MiniCSharpParser.ID, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterFormPars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitFormPars(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_formPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; type();
			State = 84; Match(ID);
			State = 91;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 85; Match(COMMA);
				State = 86; type();
				State = 87; Match(ID);
				}
				}
				State = 93;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		public ITerminalNode LBRACK() { return GetToken(MiniCSharpParser.LBRACK, 0); }
		public ITerminalNode RBRACK() { return GetToken(MiniCSharpParser.RBRACK, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(ID);
			State = 97;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRACK) {
				{
				State = 95; Match(LBRACK);
				State = 96; Match(RBRACK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(MiniCSharpParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(MiniCSharpParser.SEMICOLON, i);
		}
		public ITerminalNode ASSIGN() { return GetToken(MiniCSharpParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		public ITerminalNode INCREMENT() { return GetToken(MiniCSharpParser.INCREMENT, 0); }
		public ITerminalNode DECREMENT() { return GetToken(MiniCSharpParser.DECREMENT, 0); }
		public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public ITerminalNode IF() { return GetToken(MiniCSharpParser.IF, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(MiniCSharpParser.ELSE, 0); }
		public ITerminalNode FOR() { return GetToken(MiniCSharpParser.FOR, 0); }
		public ITerminalNode WHILE() { return GetToken(MiniCSharpParser.WHILE, 0); }
		public ITerminalNode BREAK() { return GetToken(MiniCSharpParser.BREAK, 0); }
		public ITerminalNode RETURN() { return GetToken(MiniCSharpParser.RETURN, 0); }
		public ITerminalNode READ() { return GetToken(MiniCSharpParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(MiniCSharpParser.WRITE, 0); }
		public ITerminalNode COMMA() { return GetToken(MiniCSharpParser.COMMA, 0); }
		public ITerminalNode INTLIT() { return GetToken(MiniCSharpParser.INTLIT, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_statement);
		int _la;
		try {
			State = 167;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 99; designator();
				State = 109;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ASSIGN:
					{
					State = 100; Match(ASSIGN);
					State = 101; expr();
					}
					break;
				case LPAREN:
					{
					State = 102; Match(LPAREN);
					State = 104;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << TRUE) | (1L << FALSE) | (1L << ADDOP) | (1L << LPAREN) | (1L << INTLIT) | (1L << DOUBLELIT) | (1L << CHARLIT) | (1L << STRINGLIT) | (1L << ID))) != 0)) {
						{
						State = 103; actPars();
						}
					}

					State = 106; Match(RPAREN);
					}
					break;
				case INCREMENT:
					{
					State = 107; Match(INCREMENT);
					}
					break;
				case DECREMENT:
					{
					State = 108; Match(DECREMENT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 111; Match(SEMICOLON);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 113; Match(IF);
				State = 114; Match(LPAREN);
				State = 115; condition();
				State = 116; Match(RPAREN);
				State = 117; statement();
				State = 120;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
				case 1:
					{
					State = 118; Match(ELSE);
					State = 119; statement();
					}
					break;
				}
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 122; Match(FOR);
				State = 123; Match(LPAREN);
				State = 124; expr();
				State = 125; Match(SEMICOLON);
				State = 127;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << TRUE) | (1L << FALSE) | (1L << ADDOP) | (1L << LPAREN) | (1L << INTLIT) | (1L << DOUBLELIT) | (1L << CHARLIT) | (1L << STRINGLIT) | (1L << ID))) != 0)) {
					{
					State = 126; condition();
					}
				}

				State = 129; Match(SEMICOLON);
				State = 131;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << FOR) | (1L << WHILE) | (1L << BREAK) | (1L << RETURN) | (1L << READ) | (1L << WRITE) | (1L << LBRACE) | (1L << SEMICOLON) | (1L << ID))) != 0)) {
					{
					State = 130; statement();
					}
				}

				State = 133; Match(RPAREN);
				State = 134; statement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 136; Match(WHILE);
				State = 137; Match(LPAREN);
				State = 138; condition();
				State = 139; Match(RPAREN);
				State = 140; statement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 142; Match(BREAK);
				State = 143; Match(SEMICOLON);
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 144; Match(RETURN);
				State = 146;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << TRUE) | (1L << FALSE) | (1L << ADDOP) | (1L << LPAREN) | (1L << INTLIT) | (1L << DOUBLELIT) | (1L << CHARLIT) | (1L << STRINGLIT) | (1L << ID))) != 0)) {
					{
					State = 145; expr();
					}
				}

				State = 148; Match(SEMICOLON);
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 7);
				{
				State = 149; Match(READ);
				State = 150; Match(LPAREN);
				State = 151; designator();
				State = 152; Match(RPAREN);
				State = 153; Match(SEMICOLON);
				}
				break;
			case WRITE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 155; Match(WRITE);
				State = 156; Match(LPAREN);
				State = 157; expr();
				State = 160;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 158; Match(COMMA);
					State = 159; Match(INTLIT);
					}
				}

				State = 162; Match(RPAREN);
				State = 163; Match(SEMICOLON);
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 165; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 10);
				{
				State = 166; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(LBRACE);
			State = 174;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << FOR) | (1L << WHILE) | (1L << BREAK) | (1L << RETURN) | (1L << READ) | (1L << WRITE) | (1L << LBRACE) | (1L << SEMICOLON) | (1L << ID))) != 0)) {
				{
				State = 172;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					State = 170; varDecl();
					}
					break;

				case 2:
					{
					State = 171; statement();
					}
					break;
				}
				}
				State = 176;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 177; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterActPars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitActPars(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_actPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; expr();
			State = 184;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 180; Match(COMMA);
				State = 181; expr();
				}
				}
				State = 186;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public CondTermContext[] condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(MiniCSharpParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(MiniCSharpParser.OR, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; condTerm();
			State = 192;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==OR) {
				{
				{
				State = 188; Match(OR);
				State = 189; condTerm();
				}
				}
				State = 194;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(MiniCSharpParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(MiniCSharpParser.AND, i);
		}
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterCondTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitCondTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_condTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; condFact();
			State = 200;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AND) {
				{
				{
				State = 196; Match(AND);
				State = 197; condFact();
				}
				}
				State = 202;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterCondFact(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitCondFact(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondFact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_condFact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; expr();
			State = 204; relop();
			State = 205; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode[] ADDOP() { return GetTokens(MiniCSharpParser.ADDOP); }
		public ITerminalNode ADDOP(int i) {
			return GetToken(MiniCSharpParser.ADDOP, i);
		}
		public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ADDOP) {
				{
				State = 207; Match(ADDOP);
				}
			}

			State = 211;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				State = 210; cast();
				}
				break;
			}
			State = 213; term();
			State = 218;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ADDOP) {
				{
				{
				State = 214; Match(ADDOP);
				State = 215; term();
				}
				}
				State = 220;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterCast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitCast(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(LPAREN);
			State = 222; type();
			State = 223; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public ITerminalNode[] MULOP() { return GetTokens(MiniCSharpParser.MULOP); }
		public ITerminalNode MULOP(int i) {
			return GetToken(MiniCSharpParser.MULOP, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; factor();
			State = 230;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==MULOP) {
				{
				{
				State = 226; Match(MULOP);
				State = 227; factor();
				}
				}
				State = 232;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public ITerminalNode INTLIT() { return GetToken(MiniCSharpParser.INTLIT, 0); }
		public ITerminalNode DOUBLELIT() { return GetToken(MiniCSharpParser.DOUBLELIT, 0); }
		public ITerminalNode CHARLIT() { return GetToken(MiniCSharpParser.CHARLIT, 0); }
		public ITerminalNode STRINGLIT() { return GetToken(MiniCSharpParser.STRINGLIT, 0); }
		public ITerminalNode TRUE() { return GetToken(MiniCSharpParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(MiniCSharpParser.FALSE, 0); }
		public ITerminalNode NEW() { return GetToken(MiniCSharpParser.NEW, 0); }
		public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		public ITerminalNode LBRACK() { return GetToken(MiniCSharpParser.LBRACK, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RBRACK() { return GetToken(MiniCSharpParser.RBRACK, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_factor);
		int _la;
		try {
			State = 259;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 233; designator();
				State = 239;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LPAREN) {
					{
					State = 234; Match(LPAREN);
					State = 236;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << TRUE) | (1L << FALSE) | (1L << ADDOP) | (1L << LPAREN) | (1L << INTLIT) | (1L << DOUBLELIT) | (1L << CHARLIT) | (1L << STRINGLIT) | (1L << ID))) != 0)) {
						{
						State = 235; actPars();
						}
					}

					State = 238; Match(RPAREN);
					}
				}

				}
				break;
			case INTLIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 241; Match(INTLIT);
				}
				break;
			case DOUBLELIT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 242; Match(DOUBLELIT);
				}
				break;
			case CHARLIT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 243; Match(CHARLIT);
				}
				break;
			case STRINGLIT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 244; Match(STRINGLIT);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 245; Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 246; Match(FALSE);
				}
				break;
			case NEW:
				EnterOuterAlt(_localctx, 8);
				{
				State = 247; Match(NEW);
				State = 248; Match(ID);
				State = 253;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBRACK) {
					{
					State = 249; Match(LBRACK);
					State = 250; expr();
					State = 251; Match(RBRACK);
					}
				}

				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 9);
				{
				State = 255; Match(LPAREN);
				State = 256; expr();
				State = 257; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(MiniCSharpParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(MiniCSharpParser.ID, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(MiniCSharpParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(MiniCSharpParser.DOT, i);
		}
		public ITerminalNode[] LBRACK() { return GetTokens(MiniCSharpParser.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(MiniCSharpParser.LBRACK, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(MiniCSharpParser.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(MiniCSharpParser.RBRACK, i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterDesignator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitDesignator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; Match(ID);
			State = 270;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LBRACK || _la==DOT) {
				{
				State = 268;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case DOT:
					{
					State = 262; Match(DOT);
					State = 263; Match(ID);
					}
					break;
				case LBRACK:
					{
					State = 264; Match(LBRACK);
					State = 265; expr();
					State = 266; Match(RBRACK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 272;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		public ITerminalNode RELOP() { return GetToken(MiniCSharpParser.RELOP, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterRelop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitRelop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_relop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; Match(RELOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3)\x116\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\a\x2-\n\x2\f\x2\xE\x2\x30\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\a\x3\x38\n\x3\f\x3\xE\x3;\v\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\a\x4\x43\n\x4\f\x4\xE\x4\x46\v\x4\x3\x4\x3\x4\x3\x5\x3\x5\x5\x5L\n"+
		"\x5\x3\x5\x3\x5\x3\x5\x5\x5Q\n\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\a\x6\\\n\x6\f\x6\xE\x6_\v\x6\x3\a\x3\a\x3\a\x5\a\x64"+
		"\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x5\bk\n\b\x3\b\x3\b\x3\b\x5\bp\n\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b{\n\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x5\b\x82\n\b\x3\b\x3\b\x5\b\x86\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x95\n\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\xA3\n\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x5\b\xAA\n\b\x3\t\x3\t\x3\t\a\t\xAF\n\t\f\t\xE\t\xB2\v\t\x3\t"+
		"\x3\t\x3\n\x3\n\x3\n\a\n\xB9\n\n\f\n\xE\n\xBC\v\n\x3\v\x3\v\x3\v\a\v\xC1"+
		"\n\v\f\v\xE\v\xC4\v\v\x3\f\x3\f\x3\f\a\f\xC9\n\f\f\f\xE\f\xCC\v\f\x3\r"+
		"\x3\r\x3\r\x3\r\x3\xE\x5\xE\xD3\n\xE\x3\xE\x5\xE\xD6\n\xE\x3\xE\x3\xE"+
		"\x3\xE\a\xE\xDB\n\xE\f\xE\xE\xE\xDE\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10"+
		"\x3\x10\x3\x10\a\x10\xE7\n\x10\f\x10\xE\x10\xEA\v\x10\x3\x11\x3\x11\x3"+
		"\x11\x5\x11\xEF\n\x11\x3\x11\x5\x11\xF2\n\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x100"+
		"\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x106\n\x11\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\x10F\n\x12\f\x12\xE\x12\x112\v"+
		"\x12\x3\x13\x3\x13\x3\x13\x2\x2\x2\x14\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2"+
		"$\x2\x2\x2\x134\x2&\x3\x2\x2\x2\x4\x33\x3\x2\x2\x2\x6>\x3\x2\x2\x2\bK"+
		"\x3\x2\x2\x2\nU\x3\x2\x2\x2\f`\x3\x2\x2\x2\xE\xA9\x3\x2\x2\x2\x10\xAB"+
		"\x3\x2\x2\x2\x12\xB5\x3\x2\x2\x2\x14\xBD\x3\x2\x2\x2\x16\xC5\x3\x2\x2"+
		"\x2\x18\xCD\x3\x2\x2\x2\x1A\xD2\x3\x2\x2\x2\x1C\xDF\x3\x2\x2\x2\x1E\xE3"+
		"\x3\x2\x2\x2 \x105\x3\x2\x2\x2\"\x107\x3\x2\x2\x2$\x113\x3\x2\x2\x2&\'"+
		"\a\x3\x2\x2\'(\a&\x2\x2(.\a\x1B\x2\x2)-\x5\x4\x3\x2*-\x5\x6\x4\x2+-\x5"+
		"\b\x5\x2,)\x3\x2\x2\x2,*\x3\x2\x2\x2,+\x3\x2\x2\x2-\x30\x3\x2\x2\x2.,"+
		"\x3\x2\x2\x2./\x3\x2\x2\x2/\x31\x3\x2\x2\x2\x30.\x3\x2\x2\x2\x31\x32\a"+
		"\x1C\x2\x2\x32\x3\x3\x2\x2\x2\x33\x34\x5\f\a\x2\x34\x39\a&\x2\x2\x35\x36"+
		"\a \x2\x2\x36\x38\a&\x2\x2\x37\x35\x3\x2\x2\x2\x38;\x3\x2\x2\x2\x39\x37"+
		"\x3\x2\x2\x2\x39:\x3\x2\x2\x2:<\x3\x2\x2\x2;\x39\x3\x2\x2\x2<=\a\x1F\x2"+
		"\x2=\x5\x3\x2\x2\x2>?\a\x3\x2\x2?@\a&\x2\x2@\x44\a\x1B\x2\x2\x41\x43\x5"+
		"\x4\x3\x2\x42\x41\x3\x2\x2\x2\x43\x46\x3\x2\x2\x2\x44\x42\x3\x2\x2\x2"+
		"\x44\x45\x3\x2\x2\x2\x45G\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2GH\a\x1C\x2\x2"+
		"H\a\x3\x2\x2\x2IL\x5\f\a\x2JL\a\x4\x2\x2KI\x3\x2\x2\x2KJ\x3\x2\x2\x2L"+
		"M\x3\x2\x2\x2MN\a&\x2\x2NP\a\x19\x2\x2OQ\x5\n\x6\x2PO\x3\x2\x2\x2PQ\x3"+
		"\x2\x2\x2QR\x3\x2\x2\x2RS\a\x1A\x2\x2ST\x5\x10\t\x2T\t\x3\x2\x2\x2UV\x5"+
		"\f\a\x2V]\a&\x2\x2WX\a \x2\x2XY\x5\f\a\x2YZ\a&\x2\x2Z\\\x3\x2\x2\x2[W"+
		"\x3\x2\x2\x2\\_\x3\x2\x2\x2][\x3\x2\x2\x2]^\x3\x2\x2\x2^\v\x3\x2\x2\x2"+
		"_]\x3\x2\x2\x2`\x63\a&\x2\x2\x61\x62\a\x1D\x2\x2\x62\x64\a\x1E\x2\x2\x63"+
		"\x61\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64\r\x3\x2\x2\x2\x65o\x5\"\x12\x2"+
		"\x66g\a\x11\x2\x2gp\x5\x1A\xE\x2hj\a\x19\x2\x2ik\x5\x12\n\x2ji\x3\x2\x2"+
		"\x2jk\x3\x2\x2\x2kl\x3\x2\x2\x2lp\a\x1A\x2\x2mp\a\x17\x2\x2np\a\x18\x2"+
		"\x2o\x66\x3\x2\x2\x2oh\x3\x2\x2\x2om\x3\x2\x2\x2on\x3\x2\x2\x2pq\x3\x2"+
		"\x2\x2qr\a\x1F\x2\x2r\xAA\x3\x2\x2\x2st\a\x5\x2\x2tu\a\x19\x2\x2uv\x5"+
		"\x14\v\x2vw\a\x1A\x2\x2wz\x5\xE\b\x2xy\a\x6\x2\x2y{\x5\xE\b\x2zx\x3\x2"+
		"\x2\x2z{\x3\x2\x2\x2{\xAA\x3\x2\x2\x2|}\a\a\x2\x2}~\a\x19\x2\x2~\x7F\x5"+
		"\x1A\xE\x2\x7F\x81\a\x1F\x2\x2\x80\x82\x5\x14\v\x2\x81\x80\x3\x2\x2\x2"+
		"\x81\x82\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x85\a\x1F\x2\x2\x84\x86\x5"+
		"\xE\b\x2\x85\x84\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87"+
		"\x88\a\x1A\x2\x2\x88\x89\x5\xE\b\x2\x89\xAA\x3\x2\x2\x2\x8A\x8B\a\b\x2"+
		"\x2\x8B\x8C\a\x19\x2\x2\x8C\x8D\x5\x14\v\x2\x8D\x8E\a\x1A\x2\x2\x8E\x8F"+
		"\x5\xE\b\x2\x8F\xAA\x3\x2\x2\x2\x90\x91\a\t\x2\x2\x91\xAA\a\x1F\x2\x2"+
		"\x92\x94\a\n\x2\x2\x93\x95\x5\x1A\xE\x2\x94\x93\x3\x2\x2\x2\x94\x95\x3"+
		"\x2\x2\x2\x95\x96\x3\x2\x2\x2\x96\xAA\a\x1F\x2\x2\x97\x98\a\v\x2\x2\x98"+
		"\x99\a\x19\x2\x2\x99\x9A\x5\"\x12\x2\x9A\x9B\a\x1A\x2\x2\x9B\x9C\a\x1F"+
		"\x2\x2\x9C\xAA\x3\x2\x2\x2\x9D\x9E\a\f\x2\x2\x9E\x9F\a\x19\x2\x2\x9F\xA2"+
		"\x5\x1A\xE\x2\xA0\xA1\a \x2\x2\xA1\xA3\a\"\x2\x2\xA2\xA0\x3\x2\x2\x2\xA2"+
		"\xA3\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA5\a\x1A\x2\x2\xA5\xA6\a\x1F"+
		"\x2\x2\xA6\xAA\x3\x2\x2\x2\xA7\xAA\x5\x10\t\x2\xA8\xAA\a\x1F\x2\x2\xA9"+
		"\x65\x3\x2\x2\x2\xA9s\x3\x2\x2\x2\xA9|\x3\x2\x2\x2\xA9\x8A\x3\x2\x2\x2"+
		"\xA9\x90\x3\x2\x2\x2\xA9\x92\x3\x2\x2\x2\xA9\x97\x3\x2\x2\x2\xA9\x9D\x3"+
		"\x2\x2\x2\xA9\xA7\x3\x2\x2\x2\xA9\xA8\x3\x2\x2\x2\xAA\xF\x3\x2\x2\x2\xAB"+
		"\xB0\a\x1B\x2\x2\xAC\xAF\x5\x4\x3\x2\xAD\xAF\x5\xE\b\x2\xAE\xAC\x3\x2"+
		"\x2\x2\xAE\xAD\x3\x2\x2\x2\xAF\xB2\x3\x2\x2\x2\xB0\xAE\x3\x2\x2\x2\xB0"+
		"\xB1\x3\x2\x2\x2\xB1\xB3\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2\xB3\xB4\a\x1C"+
		"\x2\x2\xB4\x11\x3\x2\x2\x2\xB5\xBA\x5\x1A\xE\x2\xB6\xB7\a \x2\x2\xB7\xB9"+
		"\x5\x1A\xE\x2\xB8\xB6\x3\x2\x2\x2\xB9\xBC\x3\x2\x2\x2\xBA\xB8\x3\x2\x2"+
		"\x2\xBA\xBB\x3\x2\x2\x2\xBB\x13\x3\x2\x2\x2\xBC\xBA\x3\x2\x2\x2\xBD\xC2"+
		"\x5\x16\f\x2\xBE\xBF\a\x16\x2\x2\xBF\xC1\x5\x16\f\x2\xC0\xBE\x3\x2\x2"+
		"\x2\xC1\xC4\x3\x2\x2\x2\xC2\xC0\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\x15"+
		"\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC5\xCA\x5\x18\r\x2\xC6\xC7\a\x15\x2"+
		"\x2\xC7\xC9\x5\x18\r\x2\xC8\xC6\x3\x2\x2\x2\xC9\xCC\x3\x2\x2\x2\xCA\xC8"+
		"\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB\x17\x3\x2\x2\x2\xCC\xCA\x3\x2\x2"+
		"\x2\xCD\xCE\x5\x1A\xE\x2\xCE\xCF\x5$\x13\x2\xCF\xD0\x5\x1A\xE\x2\xD0\x19"+
		"\x3\x2\x2\x2\xD1\xD3\a\x12\x2\x2\xD2\xD1\x3\x2\x2\x2\xD2\xD3\x3\x2\x2"+
		"\x2\xD3\xD5\x3\x2\x2\x2\xD4\xD6\x5\x1C\xF\x2\xD5\xD4\x3\x2\x2\x2\xD5\xD6"+
		"\x3\x2\x2\x2\xD6\xD7\x3\x2\x2\x2\xD7\xDC\x5\x1E\x10\x2\xD8\xD9\a\x12\x2"+
		"\x2\xD9\xDB\x5\x1E\x10\x2\xDA\xD8\x3\x2\x2\x2\xDB\xDE\x3\x2\x2\x2\xDC"+
		"\xDA\x3\x2\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\x1B\x3\x2\x2\x2\xDE\xDC\x3\x2"+
		"\x2\x2\xDF\xE0\a\x19\x2\x2\xE0\xE1\x5\f\a\x2\xE1\xE2\a\x1A\x2\x2\xE2\x1D"+
		"\x3\x2\x2\x2\xE3\xE8\x5 \x11\x2\xE4\xE5\a\x13\x2\x2\xE5\xE7\x5 \x11\x2"+
		"\xE6\xE4\x3\x2\x2\x2\xE7\xEA\x3\x2\x2\x2\xE8\xE6\x3\x2\x2\x2\xE8\xE9\x3"+
		"\x2\x2\x2\xE9\x1F\x3\x2\x2\x2\xEA\xE8\x3\x2\x2\x2\xEB\xF1\x5\"\x12\x2"+
		"\xEC\xEE\a\x19\x2\x2\xED\xEF\x5\x12\n\x2\xEE\xED\x3\x2\x2\x2\xEE\xEF\x3"+
		"\x2\x2\x2\xEF\xF0\x3\x2\x2\x2\xF0\xF2\a\x1A\x2\x2\xF1\xEC\x3\x2\x2\x2"+
		"\xF1\xF2\x3\x2\x2\x2\xF2\x106\x3\x2\x2\x2\xF3\x106\a\"\x2\x2\xF4\x106"+
		"\a#\x2\x2\xF5\x106\a$\x2\x2\xF6\x106\a%\x2\x2\xF7\x106\a\xE\x2\x2\xF8"+
		"\x106\a\xF\x2\x2\xF9\xFA\a\r\x2\x2\xFA\xFF\a&\x2\x2\xFB\xFC\a\x1D\x2\x2"+
		"\xFC\xFD\x5\x1A\xE\x2\xFD\xFE\a\x1E\x2\x2\xFE\x100\x3\x2\x2\x2\xFF\xFB"+
		"\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100\x106\x3\x2\x2\x2\x101\x102\a\x19"+
		"\x2\x2\x102\x103\x5\x1A\xE\x2\x103\x104\a\x1A\x2\x2\x104\x106\x3\x2\x2"+
		"\x2\x105\xEB\x3\x2\x2\x2\x105\xF3\x3\x2\x2\x2\x105\xF4\x3\x2\x2\x2\x105"+
		"\xF5\x3\x2\x2\x2\x105\xF6\x3\x2\x2\x2\x105\xF7\x3\x2\x2\x2\x105\xF8\x3"+
		"\x2\x2\x2\x105\xF9\x3\x2\x2\x2\x105\x101\x3\x2\x2\x2\x106!\x3\x2\x2\x2"+
		"\x107\x110\a&\x2\x2\x108\x109\a!\x2\x2\x109\x10F\a&\x2\x2\x10A\x10B\a"+
		"\x1D\x2\x2\x10B\x10C\x5\x1A\xE\x2\x10C\x10D\a\x1E\x2\x2\x10D\x10F\x3\x2"+
		"\x2\x2\x10E\x108\x3\x2\x2\x2\x10E\x10A\x3\x2\x2\x2\x10F\x112\x3\x2\x2"+
		"\x2\x110\x10E\x3\x2\x2\x2\x110\x111\x3\x2\x2\x2\x111#\x3\x2\x2\x2\x112"+
		"\x110\x3\x2\x2\x2\x113\x114\a\x14\x2\x2\x114%\x3\x2\x2\x2!,.\x39\x44K"+
		"P]\x63joz\x81\x85\x94\xA2\xA9\xAE\xB0\xBA\xC2\xCA\xD2\xD5\xDC\xE8\xEE"+
		"\xF1\xFF\x105\x10E\x110";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MiniCSharp.Grammar
