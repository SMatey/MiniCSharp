//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\casam\OneDrive\Documentos\Anio 2025\semestre 1\QA\MiniCSharp\MiniCSharp\Grammar\MiniCSharpLexer.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MiniCSharp.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MiniCSharpLexer : Lexer {
	public const int
		CLASS=1, VOID=2, IF=3, ELSE=4, FOR=5, WHILE=6, BREAK=7, RETURN=8, READ=9, 
		WRITE=10, NEW=11, TRUE=12, FALSE=13, NULL=14, ASSIGN=15, ADDOP=16, MULOP=17, 
		RELOP=18, AND=19, OR=20, INCREMENT=21, DECREMENT=22, LPAREN=23, RPAREN=24, 
		LBRACE=25, RBRACE=26, LBRACK=27, RBRACK=28, SEMICOLON=29, COMMA=30, DOT=31, 
		INTLIT=32, DOUBLELIT=33, CHARLIT=34, STRINGLIT=35, ID=36, COMMENT=37, 
		LINECOMMENT=38, WS=39;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"CLASS", "VOID", "IF", "ELSE", "FOR", "WHILE", "BREAK", "RETURN", "READ", 
		"WRITE", "NEW", "TRUE", "FALSE", "NULL", "ASSIGN", "ADDOP", "MULOP", "RELOP", 
		"AND", "OR", "INCREMENT", "DECREMENT", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
		"LBRACK", "RBRACK", "SEMICOLON", "COMMA", "DOT", "INTLIT", "DOUBLELIT", 
		"CHARLIT", "STRINGLIT", "ID", "COMMENT", "LINECOMMENT", "WS"
	};


	public MiniCSharpLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'void'", "'if'", "'else'", "'for'", "'while'", "'break'", 
		"'return'", "'read'", "'write'", "'new'", "'true'", "'false'", "'null'", 
		"'='", null, null, null, "'&&'", "'||'", "'++'", "'--'", "'('", "')'", 
		"'{'", "'}'", "'['", "']'", "';'", "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "VOID", "IF", "ELSE", "FOR", "WHILE", "BREAK", "RETURN", 
		"READ", "WRITE", "NEW", "TRUE", "FALSE", "NULL", "ASSIGN", "ADDOP", "MULOP", 
		"RELOP", "AND", "OR", "INCREMENT", "DECREMENT", "LPAREN", "RPAREN", "LBRACE", 
		"RBRACE", "LBRACK", "RBRACK", "SEMICOLON", "COMMA", "DOT", "INTLIT", "DOUBLELIT", 
		"CHARLIT", "STRINGLIT", "ID", "COMMENT", "LINECOMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSharpLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2)\x118\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f"+
		"\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12"+
		"\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x5\x13\xAA\n\x13\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3"+
		"\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3"+
		"\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3"+
		"\x1F\x3 \x3 \x3!\x3!\x3!\a!\xCD\n!\f!\xE!\xD0\v!\x5!\xD2\n!\x3\"\x6\""+
		"\xD5\n\"\r\"\xE\"\xD6\x3\"\x3\"\x6\"\xDB\n\"\r\"\xE\"\xDC\x3#\x3#\x3#"+
		"\x3#\x5#\xE3\n#\x3#\x3#\x3$\x3$\x3$\x3$\a$\xEB\n$\f$\xE$\xEE\v$\x3$\x3"+
		"$\x3%\x3%\a%\xF4\n%\f%\xE%\xF7\v%\x3&\x3&\x3&\x3&\a&\xFD\n&\f&\xE&\x100"+
		"\v&\x3&\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\a\'\x10B\n\'\f\'\xE\'\x10E"+
		"\v\'\x3\'\x3\'\x3(\x6(\x113\n(\r(\xE(\x114\x3(\x3(\x3\xFE\x2\x2)\x3\x2"+
		"\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15"+
		"\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13"+
		"%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B"+
		"\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45"+
		"\x2$G\x2%I\x2&K\x2\'M\x2(O\x2)\x3\x2\r\x4\x2--//\x5\x2\'\',,\x31\x31\x4"+
		"\x2>>@@\x3\x2\x33;\x3\x2\x32;\x5\x2\f\f\xF\xF))\x6\x2\f\f\xF\xF$$^^\x5"+
		"\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x4\x2\f\f\xF\xF\x5"+
		"\x2\v\f\xF\xF\"\"\x126\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2"+
		"\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2"+
		"\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17"+
		"\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2"+
		"\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2"+
		"\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3"+
		"\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2"+
		"\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2"+
		"?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2"+
		"\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3"+
		"\x2\x2\x2\x3Q\x3\x2\x2\x2\x5W\x3\x2\x2\x2\a\\\x3\x2\x2\x2\t_\x3\x2\x2"+
		"\x2\v\x64\x3\x2\x2\x2\rh\x3\x2\x2\x2\xFn\x3\x2\x2\x2\x11t\x3\x2\x2\x2"+
		"\x13{\x3\x2\x2\x2\x15\x80\x3\x2\x2\x2\x17\x86\x3\x2\x2\x2\x19\x8A\x3\x2"+
		"\x2\x2\x1B\x8F\x3\x2\x2\x2\x1D\x95\x3\x2\x2\x2\x1F\x9A\x3\x2\x2\x2!\x9C"+
		"\x3\x2\x2\x2#\x9E\x3\x2\x2\x2%\xA9\x3\x2\x2\x2\'\xAB\x3\x2\x2\x2)\xAE"+
		"\x3\x2\x2\x2+\xB1\x3\x2\x2\x2-\xB4\x3\x2\x2\x2/\xB7\x3\x2\x2\x2\x31\xB9"+
		"\x3\x2\x2\x2\x33\xBB\x3\x2\x2\x2\x35\xBD\x3\x2\x2\x2\x37\xBF\x3\x2\x2"+
		"\x2\x39\xC1\x3\x2\x2\x2;\xC3\x3\x2\x2\x2=\xC5\x3\x2\x2\x2?\xC7\x3\x2\x2"+
		"\x2\x41\xD1\x3\x2\x2\x2\x43\xD4\x3\x2\x2\x2\x45\xDE\x3\x2\x2\x2G\xE6\x3"+
		"\x2\x2\x2I\xF1\x3\x2\x2\x2K\xF8\x3\x2\x2\x2M\x106\x3\x2\x2\x2O\x112\x3"+
		"\x2\x2\x2QR\a\x65\x2\x2RS\an\x2\x2ST\a\x63\x2\x2TU\au\x2\x2UV\au\x2\x2"+
		"V\x4\x3\x2\x2\x2WX\ax\x2\x2XY\aq\x2\x2YZ\ak\x2\x2Z[\a\x66\x2\x2[\x6\x3"+
		"\x2\x2\x2\\]\ak\x2\x2]^\ah\x2\x2^\b\x3\x2\x2\x2_`\ag\x2\x2`\x61\an\x2"+
		"\x2\x61\x62\au\x2\x2\x62\x63\ag\x2\x2\x63\n\x3\x2\x2\x2\x64\x65\ah\x2"+
		"\x2\x65\x66\aq\x2\x2\x66g\at\x2\x2g\f\x3\x2\x2\x2hi\ay\x2\x2ij\aj\x2\x2"+
		"jk\ak\x2\x2kl\an\x2\x2lm\ag\x2\x2m\xE\x3\x2\x2\x2no\a\x64\x2\x2op\at\x2"+
		"\x2pq\ag\x2\x2qr\a\x63\x2\x2rs\am\x2\x2s\x10\x3\x2\x2\x2tu\at\x2\x2uv"+
		"\ag\x2\x2vw\av\x2\x2wx\aw\x2\x2xy\at\x2\x2yz\ap\x2\x2z\x12\x3\x2\x2\x2"+
		"{|\at\x2\x2|}\ag\x2\x2}~\a\x63\x2\x2~\x7F\a\x66\x2\x2\x7F\x14\x3\x2\x2"+
		"\x2\x80\x81\ay\x2\x2\x81\x82\at\x2\x2\x82\x83\ak\x2\x2\x83\x84\av\x2\x2"+
		"\x84\x85\ag\x2\x2\x85\x16\x3\x2\x2\x2\x86\x87\ap\x2\x2\x87\x88\ag\x2\x2"+
		"\x88\x89\ay\x2\x2\x89\x18\x3\x2\x2\x2\x8A\x8B\av\x2\x2\x8B\x8C\at\x2\x2"+
		"\x8C\x8D\aw\x2\x2\x8D\x8E\ag\x2\x2\x8E\x1A\x3\x2\x2\x2\x8F\x90\ah\x2\x2"+
		"\x90\x91\a\x63\x2\x2\x91\x92\an\x2\x2\x92\x93\au\x2\x2\x93\x94\ag\x2\x2"+
		"\x94\x1C\x3\x2\x2\x2\x95\x96\ap\x2\x2\x96\x97\aw\x2\x2\x97\x98\an\x2\x2"+
		"\x98\x99\an\x2\x2\x99\x1E\x3\x2\x2\x2\x9A\x9B\a?\x2\x2\x9B \x3\x2\x2\x2"+
		"\x9C\x9D\t\x2\x2\x2\x9D\"\x3\x2\x2\x2\x9E\x9F\t\x3\x2\x2\x9F$\x3\x2\x2"+
		"\x2\xA0\xA1\a?\x2\x2\xA1\xAA\a?\x2\x2\xA2\xA3\a#\x2\x2\xA3\xAA\a?\x2\x2"+
		"\xA4\xA5\a>\x2\x2\xA5\xAA\a?\x2\x2\xA6\xA7\a@\x2\x2\xA7\xAA\a?\x2\x2\xA8"+
		"\xAA\t\x4\x2\x2\xA9\xA0\x3\x2\x2\x2\xA9\xA2\x3\x2\x2\x2\xA9\xA4\x3\x2"+
		"\x2\x2\xA9\xA6\x3\x2\x2\x2\xA9\xA8\x3\x2\x2\x2\xAA&\x3\x2\x2\x2\xAB\xAC"+
		"\a(\x2\x2\xAC\xAD\a(\x2\x2\xAD(\x3\x2\x2\x2\xAE\xAF\a~\x2\x2\xAF\xB0\a"+
		"~\x2\x2\xB0*\x3\x2\x2\x2\xB1\xB2\a-\x2\x2\xB2\xB3\a-\x2\x2\xB3,\x3\x2"+
		"\x2\x2\xB4\xB5\a/\x2\x2\xB5\xB6\a/\x2\x2\xB6.\x3\x2\x2\x2\xB7\xB8\a*\x2"+
		"\x2\xB8\x30\x3\x2\x2\x2\xB9\xBA\a+\x2\x2\xBA\x32\x3\x2\x2\x2\xBB\xBC\a"+
		"}\x2\x2\xBC\x34\x3\x2\x2\x2\xBD\xBE\a\x7F\x2\x2\xBE\x36\x3\x2\x2\x2\xBF"+
		"\xC0\a]\x2\x2\xC0\x38\x3\x2\x2\x2\xC1\xC2\a_\x2\x2\xC2:\x3\x2\x2\x2\xC3"+
		"\xC4\a=\x2\x2\xC4<\x3\x2\x2\x2\xC5\xC6\a.\x2\x2\xC6>\x3\x2\x2\x2\xC7\xC8"+
		"\a\x30\x2\x2\xC8@\x3\x2\x2\x2\xC9\xD2\a\x32\x2\x2\xCA\xCE\t\x5\x2\x2\xCB"+
		"\xCD\t\x6\x2\x2\xCC\xCB\x3\x2\x2\x2\xCD\xD0\x3\x2\x2\x2\xCE\xCC\x3\x2"+
		"\x2\x2\xCE\xCF\x3\x2\x2\x2\xCF\xD2\x3\x2\x2\x2\xD0\xCE\x3\x2\x2\x2\xD1"+
		"\xC9\x3\x2\x2\x2\xD1\xCA\x3\x2\x2\x2\xD2\x42\x3\x2\x2\x2\xD3\xD5\t\x6"+
		"\x2\x2\xD4\xD3\x3\x2\x2\x2\xD5\xD6\x3\x2\x2\x2\xD6\xD4\x3\x2\x2\x2\xD6"+
		"\xD7\x3\x2\x2\x2\xD7\xD8\x3\x2\x2\x2\xD8\xDA\a\x30\x2\x2\xD9\xDB\t\x6"+
		"\x2\x2\xDA\xD9\x3\x2\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDC"+
		"\xDD\x3\x2\x2\x2\xDD\x44\x3\x2\x2\x2\xDE\xE2\a)\x2\x2\xDF\xE3\n\a\x2\x2"+
		"\xE0\xE1\a^\x2\x2\xE1\xE3\a)\x2\x2\xE2\xDF\x3\x2\x2\x2\xE2\xE0\x3\x2\x2"+
		"\x2\xE3\xE4\x3\x2\x2\x2\xE4\xE5\a)\x2\x2\xE5\x46\x3\x2\x2\x2\xE6\xEC\a"+
		"$\x2\x2\xE7\xEB\n\b\x2\x2\xE8\xE9\a^\x2\x2\xE9\xEB\v\x2\x2\x2\xEA\xE7"+
		"\x3\x2\x2\x2\xEA\xE8\x3\x2\x2\x2\xEB\xEE\x3\x2\x2\x2\xEC\xEA\x3\x2\x2"+
		"\x2\xEC\xED\x3\x2\x2\x2\xED\xEF\x3\x2\x2\x2\xEE\xEC\x3\x2\x2\x2\xEF\xF0"+
		"\a$\x2\x2\xF0H\x3\x2\x2\x2\xF1\xF5\t\t\x2\x2\xF2\xF4\t\n\x2\x2\xF3\xF2"+
		"\x3\x2\x2\x2\xF4\xF7\x3\x2\x2\x2\xF5\xF3\x3\x2\x2\x2\xF5\xF6\x3\x2\x2"+
		"\x2\xF6J\x3\x2\x2\x2\xF7\xF5\x3\x2\x2\x2\xF8\xF9\a\x31\x2\x2\xF9\xFA\a"+
		",\x2\x2\xFA\xFE\x3\x2\x2\x2\xFB\xFD\v\x2\x2\x2\xFC\xFB\x3\x2\x2\x2\xFD"+
		"\x100\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFE\xFC\x3\x2\x2\x2\xFF\x101\x3"+
		"\x2\x2\x2\x100\xFE\x3\x2\x2\x2\x101\x102\a,\x2\x2\x102\x103\a\x31\x2\x2"+
		"\x103\x104\x3\x2\x2\x2\x104\x105\b&\x2\x2\x105L\x3\x2\x2\x2\x106\x107"+
		"\a\x31\x2\x2\x107\x108\a\x31\x2\x2\x108\x10C\x3\x2\x2\x2\x109\x10B\n\v"+
		"\x2\x2\x10A\x109\x3\x2\x2\x2\x10B\x10E\x3\x2\x2\x2\x10C\x10A\x3\x2\x2"+
		"\x2\x10C\x10D\x3\x2\x2\x2\x10D\x10F\x3\x2\x2\x2\x10E\x10C\x3\x2\x2\x2"+
		"\x10F\x110\b\'\x2\x2\x110N\x3\x2\x2\x2\x111\x113\t\f\x2\x2\x112\x111\x3"+
		"\x2\x2\x2\x113\x114\x3\x2\x2\x2\x114\x112\x3\x2\x2\x2\x114\x115\x3\x2"+
		"\x2\x2\x115\x116\x3\x2\x2\x2\x116\x117\b(\x3\x2\x117P\x3\x2\x2\x2\xF\x2"+
		"\xA9\xCE\xD1\xD6\xDC\xE2\xEA\xEC\xF5\xFE\x10C\x114\x4\x2\x3\x2\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MiniCSharp.Grammar
